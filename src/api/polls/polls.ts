/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Keyo API
 * API for Keyo Polls app
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { customInstance } from '.././custom-instance';
import type { BodyType, ErrorType } from '.././custom-instance';
import type {
  CastVoteSchema,
  KeyopollsPollsApiGeneralListPollsParams,
  KeyopollsPollsApiOperationsCreatePollBody,
  Message,
  PollCreateError,
  PollDetails,
  PollListResponseSchema,
  PollUpdateSchema,
} from '.././schemas';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Create a new poll in a community
 * @summary Create Poll
 */
export const keyopollsPollsApiOperationsCreatePoll = (
  keyopollsPollsApiOperationsCreatePollBody: BodyType<KeyopollsPollsApiOperationsCreatePollBody>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  const formData = new FormData();
  if (keyopollsPollsApiOperationsCreatePollBody.option_images !== undefined) {
    keyopollsPollsApiOperationsCreatePollBody.option_images.forEach((value) =>
      formData.append(`option_images`, value)
    );
  }
  formData.append(`data`, JSON.stringify(keyopollsPollsApiOperationsCreatePollBody.data));

  return customInstance<PollDetails>(
    {
      url: `/api/polls/operations/polls`,
      method: 'POST',
      headers: { 'Content-Type': 'multipart/form-data' },
      data: formData,
      signal,
    },
    options
  );
};

export const getKeyopollsPollsApiOperationsCreatePollMutationOptions = <
  TError = ErrorType<PollCreateError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof keyopollsPollsApiOperationsCreatePoll>>,
    TError,
    { data: BodyType<KeyopollsPollsApiOperationsCreatePollBody> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof keyopollsPollsApiOperationsCreatePoll>>,
  TError,
  { data: BodyType<KeyopollsPollsApiOperationsCreatePollBody> },
  TContext
> => {
  const mutationKey = ['keyopollsPollsApiOperationsCreatePoll'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof keyopollsPollsApiOperationsCreatePoll>>,
    { data: BodyType<KeyopollsPollsApiOperationsCreatePollBody> }
  > = (props) => {
    const { data } = props ?? {};

    return keyopollsPollsApiOperationsCreatePoll(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type KeyopollsPollsApiOperationsCreatePollMutationResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsPollsApiOperationsCreatePoll>>
>;
export type KeyopollsPollsApiOperationsCreatePollMutationBody =
  BodyType<KeyopollsPollsApiOperationsCreatePollBody>;
export type KeyopollsPollsApiOperationsCreatePollMutationError = ErrorType<PollCreateError>;

/**
 * @summary Create Poll
 */
export const useKeyopollsPollsApiOperationsCreatePoll = <
  TError = ErrorType<PollCreateError>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof keyopollsPollsApiOperationsCreatePoll>>,
      TError,
      { data: BodyType<KeyopollsPollsApiOperationsCreatePollBody> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof keyopollsPollsApiOperationsCreatePoll>>,
  TError,
  { data: BodyType<KeyopollsPollsApiOperationsCreatePollBody> },
  TContext
> => {
  const mutationOptions = getKeyopollsPollsApiOperationsCreatePollMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Update poll title and description only
 * @summary Update Poll
 */
export const keyopollsPollsApiOperationsUpdatePoll = (
  pollId: number,
  pollUpdateSchema: BodyType<PollUpdateSchema>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<PollDetails>(
    {
      url: `/api/polls/operations/polls/${pollId}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: pollUpdateSchema,
    },
    options
  );
};

export const getKeyopollsPollsApiOperationsUpdatePollMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof keyopollsPollsApiOperationsUpdatePoll>>,
    TError,
    { pollId: number; data: BodyType<PollUpdateSchema> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof keyopollsPollsApiOperationsUpdatePoll>>,
  TError,
  { pollId: number; data: BodyType<PollUpdateSchema> },
  TContext
> => {
  const mutationKey = ['keyopollsPollsApiOperationsUpdatePoll'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof keyopollsPollsApiOperationsUpdatePoll>>,
    { pollId: number; data: BodyType<PollUpdateSchema> }
  > = (props) => {
    const { pollId, data } = props ?? {};

    return keyopollsPollsApiOperationsUpdatePoll(pollId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type KeyopollsPollsApiOperationsUpdatePollMutationResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsPollsApiOperationsUpdatePoll>>
>;
export type KeyopollsPollsApiOperationsUpdatePollMutationBody = BodyType<PollUpdateSchema>;
export type KeyopollsPollsApiOperationsUpdatePollMutationError = ErrorType<Message>;

/**
 * @summary Update Poll
 */
export const useKeyopollsPollsApiOperationsUpdatePoll = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof keyopollsPollsApiOperationsUpdatePoll>>,
      TError,
      { pollId: number; data: BodyType<PollUpdateSchema> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof keyopollsPollsApiOperationsUpdatePoll>>,
  TError,
  { pollId: number; data: BodyType<PollUpdateSchema> },
  TContext
> => {
  const mutationOptions = getKeyopollsPollsApiOperationsUpdatePollMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Soft delete a poll
 * @summary Delete Poll
 */
export const keyopollsPollsApiOperationsDeletePoll = (
  pollId: number,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Message>(
    { url: `/api/polls/operations/polls/${pollId}`, method: 'DELETE' },
    options
  );
};

export const getKeyopollsPollsApiOperationsDeletePollMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof keyopollsPollsApiOperationsDeletePoll>>,
    TError,
    { pollId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof keyopollsPollsApiOperationsDeletePoll>>,
  TError,
  { pollId: number },
  TContext
> => {
  const mutationKey = ['keyopollsPollsApiOperationsDeletePoll'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof keyopollsPollsApiOperationsDeletePoll>>,
    { pollId: number }
  > = (props) => {
    const { pollId } = props ?? {};

    return keyopollsPollsApiOperationsDeletePoll(pollId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type KeyopollsPollsApiOperationsDeletePollMutationResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsPollsApiOperationsDeletePoll>>
>;

export type KeyopollsPollsApiOperationsDeletePollMutationError = ErrorType<Message>;

/**
 * @summary Delete Poll
 */
export const useKeyopollsPollsApiOperationsDeletePoll = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof keyopollsPollsApiOperationsDeletePoll>>,
      TError,
      { pollId: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof keyopollsPollsApiOperationsDeletePoll>>,
  TError,
  { pollId: number },
  TContext
> => {
  const mutationOptions = getKeyopollsPollsApiOperationsDeletePollMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Cast a vote on a poll - handles all poll types - cannot be changed once cast
 * @summary Cast Vote
 */
export const keyopollsPollsApiGeneralCastVote = (
  castVoteSchema: BodyType<CastVoteSchema>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<PollDetails>(
    {
      url: `/api/polls/general/polls/vote`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: castVoteSchema,
      signal,
    },
    options
  );
};

export const getKeyopollsPollsApiGeneralCastVoteMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof keyopollsPollsApiGeneralCastVote>>,
    TError,
    { data: BodyType<CastVoteSchema> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof keyopollsPollsApiGeneralCastVote>>,
  TError,
  { data: BodyType<CastVoteSchema> },
  TContext
> => {
  const mutationKey = ['keyopollsPollsApiGeneralCastVote'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof keyopollsPollsApiGeneralCastVote>>,
    { data: BodyType<CastVoteSchema> }
  > = (props) => {
    const { data } = props ?? {};

    return keyopollsPollsApiGeneralCastVote(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type KeyopollsPollsApiGeneralCastVoteMutationResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsPollsApiGeneralCastVote>>
>;
export type KeyopollsPollsApiGeneralCastVoteMutationBody = BodyType<CastVoteSchema>;
export type KeyopollsPollsApiGeneralCastVoteMutationError = ErrorType<Message>;

/**
 * @summary Cast Vote
 */
export const useKeyopollsPollsApiGeneralCastVote = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof keyopollsPollsApiGeneralCastVote>>,
      TError,
      { data: BodyType<CastVoteSchema> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof keyopollsPollsApiGeneralCastVote>>,
  TError,
  { data: BodyType<CastVoteSchema> },
  TContext
> => {
  const mutationOptions = getKeyopollsPollsApiGeneralCastVoteMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Get a specific poll by ID
 * @summary Get Poll
 */
export const keyopollsPollsApiGeneralGetPoll = (
  pollId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<PollDetails>(
    { url: `/api/polls/general/polls/${pollId}`, method: 'GET', signal },
    options
  );
};

export const getKeyopollsPollsApiGeneralGetPollQueryKey = (pollId: number) => {
  return [`/api/polls/general/polls/${pollId}`] as const;
};

export const getKeyopollsPollsApiGeneralGetPollQueryOptions = <
  TData = Awaited<ReturnType<typeof keyopollsPollsApiGeneralGetPoll>>,
  TError = ErrorType<Message>,
>(
  pollId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof keyopollsPollsApiGeneralGetPoll>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getKeyopollsPollsApiGeneralGetPollQueryKey(pollId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof keyopollsPollsApiGeneralGetPoll>>> = ({
    signal,
  }) => keyopollsPollsApiGeneralGetPoll(pollId, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!pollId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof keyopollsPollsApiGeneralGetPoll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type KeyopollsPollsApiGeneralGetPollQueryResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsPollsApiGeneralGetPoll>>
>;
export type KeyopollsPollsApiGeneralGetPollQueryError = ErrorType<Message>;

export function useKeyopollsPollsApiGeneralGetPoll<
  TData = Awaited<ReturnType<typeof keyopollsPollsApiGeneralGetPoll>>,
  TError = ErrorType<Message>,
>(
  pollId: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof keyopollsPollsApiGeneralGetPoll>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsPollsApiGeneralGetPoll>>,
          TError,
          Awaited<ReturnType<typeof keyopollsPollsApiGeneralGetPoll>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsPollsApiGeneralGetPoll<
  TData = Awaited<ReturnType<typeof keyopollsPollsApiGeneralGetPoll>>,
  TError = ErrorType<Message>,
>(
  pollId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof keyopollsPollsApiGeneralGetPoll>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsPollsApiGeneralGetPoll>>,
          TError,
          Awaited<ReturnType<typeof keyopollsPollsApiGeneralGetPoll>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsPollsApiGeneralGetPoll<
  TData = Awaited<ReturnType<typeof keyopollsPollsApiGeneralGetPoll>>,
  TError = ErrorType<Message>,
>(
  pollId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof keyopollsPollsApiGeneralGetPoll>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Poll
 */

export function useKeyopollsPollsApiGeneralGetPoll<
  TData = Awaited<ReturnType<typeof keyopollsPollsApiGeneralGetPoll>>,
  TError = ErrorType<Message>,
>(
  pollId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof keyopollsPollsApiGeneralGetPoll>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getKeyopollsPollsApiGeneralGetPollQueryOptions(pollId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * List polls with comprehensive filtering, searching, and pagination.
Handles all possible use cases including personalized feeds.
 * @summary List Polls
 */
export const keyopollsPollsApiGeneralListPolls = (
  params?: KeyopollsPollsApiGeneralListPollsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<PollListResponseSchema>(
    { url: `/api/polls/general/polls`, method: 'GET', params, signal },
    options
  );
};

export const getKeyopollsPollsApiGeneralListPollsQueryKey = (
  params?: KeyopollsPollsApiGeneralListPollsParams
) => {
  return [`/api/polls/general/polls`, ...(params ? [params] : [])] as const;
};

export const getKeyopollsPollsApiGeneralListPollsQueryOptions = <
  TData = Awaited<ReturnType<typeof keyopollsPollsApiGeneralListPolls>>,
  TError = ErrorType<Message>,
>(
  params?: KeyopollsPollsApiGeneralListPollsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof keyopollsPollsApiGeneralListPolls>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getKeyopollsPollsApiGeneralListPollsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof keyopollsPollsApiGeneralListPolls>>> = ({
    signal,
  }) => keyopollsPollsApiGeneralListPolls(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof keyopollsPollsApiGeneralListPolls>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type KeyopollsPollsApiGeneralListPollsQueryResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsPollsApiGeneralListPolls>>
>;
export type KeyopollsPollsApiGeneralListPollsQueryError = ErrorType<Message>;

export function useKeyopollsPollsApiGeneralListPolls<
  TData = Awaited<ReturnType<typeof keyopollsPollsApiGeneralListPolls>>,
  TError = ErrorType<Message>,
>(
  params: undefined | KeyopollsPollsApiGeneralListPollsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof keyopollsPollsApiGeneralListPolls>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsPollsApiGeneralListPolls>>,
          TError,
          Awaited<ReturnType<typeof keyopollsPollsApiGeneralListPolls>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsPollsApiGeneralListPolls<
  TData = Awaited<ReturnType<typeof keyopollsPollsApiGeneralListPolls>>,
  TError = ErrorType<Message>,
>(
  params?: KeyopollsPollsApiGeneralListPollsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof keyopollsPollsApiGeneralListPolls>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsPollsApiGeneralListPolls>>,
          TError,
          Awaited<ReturnType<typeof keyopollsPollsApiGeneralListPolls>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsPollsApiGeneralListPolls<
  TData = Awaited<ReturnType<typeof keyopollsPollsApiGeneralListPolls>>,
  TError = ErrorType<Message>,
>(
  params?: KeyopollsPollsApiGeneralListPollsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof keyopollsPollsApiGeneralListPolls>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary List Polls
 */

export function useKeyopollsPollsApiGeneralListPolls<
  TData = Awaited<ReturnType<typeof keyopollsPollsApiGeneralListPolls>>,
  TError = ErrorType<Message>,
>(
  params?: KeyopollsPollsApiGeneralListPollsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof keyopollsPollsApiGeneralListPolls>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getKeyopollsPollsApiGeneralListPollsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
