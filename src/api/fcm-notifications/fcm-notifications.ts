/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Keyo API
 * API for Keyo Polls app
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { customInstance } from '.././custom-instance';
import type { BodyType, ErrorType } from '.././custom-instance';
import type {
  BulkNotificationPreferenceUpdateIn,
  FCMResponse,
  KeyopollsNotificationsApiFcmGetNotificationStats200,
  KeyopollsNotificationsApiFcmTestSendCommunityNotificationParams,
  KeyopollsNotificationsApiFcmTestSendNotificationParams,
  Message,
  NotificationPreferenceResponse,
  NotificationPreferenceUpdateIn,
  RegisterDeviceIn,
  UnregisterDeviceIn,
} from '.././schemas';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Register FCM device token for push notifications
Available for all PseudonymousProfiles
 * @summary Register Device
 */
export const keyopollsNotificationsApiFcmRegisterDevice = (
  registerDeviceIn: BodyType<RegisterDeviceIn>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<FCMResponse>(
    {
      url: `/api/notifications/fcm/register-device/`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: registerDeviceIn,
      signal,
    },
    options
  );
};

export const getKeyopollsNotificationsApiFcmRegisterDeviceMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof keyopollsNotificationsApiFcmRegisterDevice>>,
    TError,
    { data: BodyType<RegisterDeviceIn> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof keyopollsNotificationsApiFcmRegisterDevice>>,
  TError,
  { data: BodyType<RegisterDeviceIn> },
  TContext
> => {
  const mutationKey = ['keyopollsNotificationsApiFcmRegisterDevice'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof keyopollsNotificationsApiFcmRegisterDevice>>,
    { data: BodyType<RegisterDeviceIn> }
  > = (props) => {
    const { data } = props ?? {};

    return keyopollsNotificationsApiFcmRegisterDevice(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type KeyopollsNotificationsApiFcmRegisterDeviceMutationResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsNotificationsApiFcmRegisterDevice>>
>;
export type KeyopollsNotificationsApiFcmRegisterDeviceMutationBody = BodyType<RegisterDeviceIn>;
export type KeyopollsNotificationsApiFcmRegisterDeviceMutationError = ErrorType<Message>;

/**
 * @summary Register Device
 */
export const useKeyopollsNotificationsApiFcmRegisterDevice = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof keyopollsNotificationsApiFcmRegisterDevice>>,
      TError,
      { data: BodyType<RegisterDeviceIn> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof keyopollsNotificationsApiFcmRegisterDevice>>,
  TError,
  { data: BodyType<RegisterDeviceIn> },
  TContext
> => {
  const mutationOptions = getKeyopollsNotificationsApiFcmRegisterDeviceMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Unregister FCM device token
 * @summary Unregister Device
 */
export const keyopollsNotificationsApiFcmUnregisterDevice = (
  unregisterDeviceIn: BodyType<UnregisterDeviceIn>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<FCMResponse>(
    {
      url: `/api/notifications/fcm/unregister-device/`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: unregisterDeviceIn,
      signal,
    },
    options
  );
};

export const getKeyopollsNotificationsApiFcmUnregisterDeviceMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof keyopollsNotificationsApiFcmUnregisterDevice>>,
    TError,
    { data: BodyType<UnregisterDeviceIn> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof keyopollsNotificationsApiFcmUnregisterDevice>>,
  TError,
  { data: BodyType<UnregisterDeviceIn> },
  TContext
> => {
  const mutationKey = ['keyopollsNotificationsApiFcmUnregisterDevice'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof keyopollsNotificationsApiFcmUnregisterDevice>>,
    { data: BodyType<UnregisterDeviceIn> }
  > = (props) => {
    const { data } = props ?? {};

    return keyopollsNotificationsApiFcmUnregisterDevice(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type KeyopollsNotificationsApiFcmUnregisterDeviceMutationResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsNotificationsApiFcmUnregisterDevice>>
>;
export type KeyopollsNotificationsApiFcmUnregisterDeviceMutationBody = BodyType<UnregisterDeviceIn>;
export type KeyopollsNotificationsApiFcmUnregisterDeviceMutationError = ErrorType<Message>;

/**
 * @summary Unregister Device
 */
export const useKeyopollsNotificationsApiFcmUnregisterDevice = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof keyopollsNotificationsApiFcmUnregisterDevice>>,
      TError,
      { data: BodyType<UnregisterDeviceIn> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof keyopollsNotificationsApiFcmUnregisterDevice>>,
  TError,
  { data: BodyType<UnregisterDeviceIn> },
  TContext
> => {
  const mutationOptions = getKeyopollsNotificationsApiFcmUnregisterDeviceMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Get all FCM devices for the authenticated profile
 * @summary Get My Devices
 */
export const keyopollsNotificationsApiFcmGetMyDevices = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<FCMResponse>(
    { url: `/api/notifications/fcm/devices/`, method: 'GET', signal },
    options
  );
};

export const getKeyopollsNotificationsApiFcmGetMyDevicesQueryKey = () => {
  return [`/api/notifications/fcm/devices/`] as const;
};

export const getKeyopollsNotificationsApiFcmGetMyDevicesQueryOptions = <
  TData = Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetMyDevices>>,
  TError = ErrorType<Message>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetMyDevices>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getKeyopollsNotificationsApiFcmGetMyDevicesQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetMyDevices>>
  > = ({ signal }) => keyopollsNotificationsApiFcmGetMyDevices(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetMyDevices>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type KeyopollsNotificationsApiFcmGetMyDevicesQueryResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetMyDevices>>
>;
export type KeyopollsNotificationsApiFcmGetMyDevicesQueryError = ErrorType<Message>;

export function useKeyopollsNotificationsApiFcmGetMyDevices<
  TData = Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetMyDevices>>,
  TError = ErrorType<Message>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetMyDevices>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetMyDevices>>,
          TError,
          Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetMyDevices>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsNotificationsApiFcmGetMyDevices<
  TData = Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetMyDevices>>,
  TError = ErrorType<Message>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetMyDevices>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetMyDevices>>,
          TError,
          Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetMyDevices>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsNotificationsApiFcmGetMyDevices<
  TData = Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetMyDevices>>,
  TError = ErrorType<Message>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetMyDevices>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get My Devices
 */

export function useKeyopollsNotificationsApiFcmGetMyDevices<
  TData = Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetMyDevices>>,
  TError = ErrorType<Message>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetMyDevices>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getKeyopollsNotificationsApiFcmGetMyDevicesQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get notification preferences for the authenticated profile
 * @summary Get Notification Preferences
 */
export const keyopollsNotificationsApiFcmGetNotificationPreferences = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<NotificationPreferenceResponse[]>(
    { url: `/api/notifications/fcm/preferences/`, method: 'GET', signal },
    options
  );
};

export const getKeyopollsNotificationsApiFcmGetNotificationPreferencesQueryKey = () => {
  return [`/api/notifications/fcm/preferences/`] as const;
};

export const getKeyopollsNotificationsApiFcmGetNotificationPreferencesQueryOptions = <
  TData = Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetNotificationPreferences>>,
  TError = ErrorType<Message>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetNotificationPreferences>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getKeyopollsNotificationsApiFcmGetNotificationPreferencesQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetNotificationPreferences>>
  > = ({ signal }) =>
    keyopollsNotificationsApiFcmGetNotificationPreferences(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetNotificationPreferences>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type KeyopollsNotificationsApiFcmGetNotificationPreferencesQueryResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetNotificationPreferences>>
>;
export type KeyopollsNotificationsApiFcmGetNotificationPreferencesQueryError = ErrorType<Message>;

export function useKeyopollsNotificationsApiFcmGetNotificationPreferences<
  TData = Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetNotificationPreferences>>,
  TError = ErrorType<Message>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetNotificationPreferences>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetNotificationPreferences>>,
          TError,
          Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetNotificationPreferences>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsNotificationsApiFcmGetNotificationPreferences<
  TData = Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetNotificationPreferences>>,
  TError = ErrorType<Message>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetNotificationPreferences>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetNotificationPreferences>>,
          TError,
          Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetNotificationPreferences>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsNotificationsApiFcmGetNotificationPreferences<
  TData = Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetNotificationPreferences>>,
  TError = ErrorType<Message>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetNotificationPreferences>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Notification Preferences
 */

export function useKeyopollsNotificationsApiFcmGetNotificationPreferences<
  TData = Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetNotificationPreferences>>,
  TError = ErrorType<Message>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetNotificationPreferences>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions =
    getKeyopollsNotificationsApiFcmGetNotificationPreferencesQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Bulk update notification preferences for all notification types
 * @summary Bulk Update Notification Preferences
 */
export const keyopollsNotificationsApiFcmBulkUpdateNotificationPreferences = (
  bulkNotificationPreferenceUpdateIn: BodyType<BulkNotificationPreferenceUpdateIn>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<NotificationPreferenceResponse[]>(
    {
      url: `/api/notifications/fcm/preferences/bulk-update/`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: bulkNotificationPreferenceUpdateIn,
      signal,
    },
    options
  );
};

export const getKeyopollsNotificationsApiFcmBulkUpdateNotificationPreferencesMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof keyopollsNotificationsApiFcmBulkUpdateNotificationPreferences>>,
    TError,
    { data: BodyType<BulkNotificationPreferenceUpdateIn> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof keyopollsNotificationsApiFcmBulkUpdateNotificationPreferences>>,
  TError,
  { data: BodyType<BulkNotificationPreferenceUpdateIn> },
  TContext
> => {
  const mutationKey = ['keyopollsNotificationsApiFcmBulkUpdateNotificationPreferences'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof keyopollsNotificationsApiFcmBulkUpdateNotificationPreferences>>,
    { data: BodyType<BulkNotificationPreferenceUpdateIn> }
  > = (props) => {
    const { data } = props ?? {};

    return keyopollsNotificationsApiFcmBulkUpdateNotificationPreferences(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type KeyopollsNotificationsApiFcmBulkUpdateNotificationPreferencesMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof keyopollsNotificationsApiFcmBulkUpdateNotificationPreferences>>
  >;
export type KeyopollsNotificationsApiFcmBulkUpdateNotificationPreferencesMutationBody =
  BodyType<BulkNotificationPreferenceUpdateIn>;
export type KeyopollsNotificationsApiFcmBulkUpdateNotificationPreferencesMutationError =
  ErrorType<Message>;

/**
 * @summary Bulk Update Notification Preferences
 */
export const useKeyopollsNotificationsApiFcmBulkUpdateNotificationPreferences = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof keyopollsNotificationsApiFcmBulkUpdateNotificationPreferences>>,
      TError,
      { data: BodyType<BulkNotificationPreferenceUpdateIn> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof keyopollsNotificationsApiFcmBulkUpdateNotificationPreferences>>,
  TError,
  { data: BodyType<BulkNotificationPreferenceUpdateIn> },
  TContext
> => {
  const mutationOptions =
    getKeyopollsNotificationsApiFcmBulkUpdateNotificationPreferencesMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Update notification preferences for a specific notification type
 * @summary Update Notification Preference
 */
export const keyopollsNotificationsApiFcmUpdateNotificationPreference = (
  notificationType: string,
  notificationPreferenceUpdateIn: BodyType<NotificationPreferenceUpdateIn>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<NotificationPreferenceResponse>(
    {
      url: `/api/notifications/fcm/preferences/${notificationType}/`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: notificationPreferenceUpdateIn,
      signal,
    },
    options
  );
};

export const getKeyopollsNotificationsApiFcmUpdateNotificationPreferenceMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof keyopollsNotificationsApiFcmUpdateNotificationPreference>>,
    TError,
    { notificationType: string; data: BodyType<NotificationPreferenceUpdateIn> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof keyopollsNotificationsApiFcmUpdateNotificationPreference>>,
  TError,
  { notificationType: string; data: BodyType<NotificationPreferenceUpdateIn> },
  TContext
> => {
  const mutationKey = ['keyopollsNotificationsApiFcmUpdateNotificationPreference'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof keyopollsNotificationsApiFcmUpdateNotificationPreference>>,
    { notificationType: string; data: BodyType<NotificationPreferenceUpdateIn> }
  > = (props) => {
    const { notificationType, data } = props ?? {};

    return keyopollsNotificationsApiFcmUpdateNotificationPreference(
      notificationType,
      data,
      requestOptions
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type KeyopollsNotificationsApiFcmUpdateNotificationPreferenceMutationResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsNotificationsApiFcmUpdateNotificationPreference>>
>;
export type KeyopollsNotificationsApiFcmUpdateNotificationPreferenceMutationBody =
  BodyType<NotificationPreferenceUpdateIn>;
export type KeyopollsNotificationsApiFcmUpdateNotificationPreferenceMutationError =
  ErrorType<Message>;

/**
 * @summary Update Notification Preference
 */
export const useKeyopollsNotificationsApiFcmUpdateNotificationPreference = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof keyopollsNotificationsApiFcmUpdateNotificationPreference>>,
      TError,
      { notificationType: string; data: BodyType<NotificationPreferenceUpdateIn> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof keyopollsNotificationsApiFcmUpdateNotificationPreference>>,
  TError,
  { notificationType: string; data: BodyType<NotificationPreferenceUpdateIn> },
  TContext
> => {
  const mutationOptions =
    getKeyopollsNotificationsApiFcmUpdateNotificationPreferenceMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Enable or disable push notifications for all notification types
Status should be 'enable' or 'disable'
 * @summary Toggle All Push Notifications
 */
export const keyopollsNotificationsApiFcmToggleAllPushNotifications = (
  status: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<FCMResponse>(
    { url: `/api/notifications/fcm/preferences/push/${status}/`, method: 'POST', signal },
    options
  );
};

export const getKeyopollsNotificationsApiFcmToggleAllPushNotificationsMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof keyopollsNotificationsApiFcmToggleAllPushNotifications>>,
    TError,
    { status: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof keyopollsNotificationsApiFcmToggleAllPushNotifications>>,
  TError,
  { status: string },
  TContext
> => {
  const mutationKey = ['keyopollsNotificationsApiFcmToggleAllPushNotifications'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof keyopollsNotificationsApiFcmToggleAllPushNotifications>>,
    { status: string }
  > = (props) => {
    const { status } = props ?? {};

    return keyopollsNotificationsApiFcmToggleAllPushNotifications(status, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type KeyopollsNotificationsApiFcmToggleAllPushNotificationsMutationResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsNotificationsApiFcmToggleAllPushNotifications>>
>;

export type KeyopollsNotificationsApiFcmToggleAllPushNotificationsMutationError =
  ErrorType<unknown>;

/**
 * @summary Toggle All Push Notifications
 */
export const useKeyopollsNotificationsApiFcmToggleAllPushNotifications = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof keyopollsNotificationsApiFcmToggleAllPushNotifications>>,
      TError,
      { status: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof keyopollsNotificationsApiFcmToggleAllPushNotifications>>,
  TError,
  { status: string },
  TContext
> => {
  const mutationOptions =
    getKeyopollsNotificationsApiFcmToggleAllPushNotificationsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Enable or disable email notifications for all notification types
Status should be 'enable' or 'disable'
 * @summary Toggle All Email Notifications
 */
export const keyopollsNotificationsApiFcmToggleAllEmailNotifications = (
  status: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<FCMResponse>(
    { url: `/api/notifications/fcm/preferences/email/${status}/`, method: 'POST', signal },
    options
  );
};

export const getKeyopollsNotificationsApiFcmToggleAllEmailNotificationsMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof keyopollsNotificationsApiFcmToggleAllEmailNotifications>>,
    TError,
    { status: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof keyopollsNotificationsApiFcmToggleAllEmailNotifications>>,
  TError,
  { status: string },
  TContext
> => {
  const mutationKey = ['keyopollsNotificationsApiFcmToggleAllEmailNotifications'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof keyopollsNotificationsApiFcmToggleAllEmailNotifications>>,
    { status: string }
  > = (props) => {
    const { status } = props ?? {};

    return keyopollsNotificationsApiFcmToggleAllEmailNotifications(status, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type KeyopollsNotificationsApiFcmToggleAllEmailNotificationsMutationResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsNotificationsApiFcmToggleAllEmailNotifications>>
>;

export type KeyopollsNotificationsApiFcmToggleAllEmailNotificationsMutationError =
  ErrorType<unknown>;

/**
 * @summary Toggle All Email Notifications
 */
export const useKeyopollsNotificationsApiFcmToggleAllEmailNotifications = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof keyopollsNotificationsApiFcmToggleAllEmailNotifications>>,
      TError,
      { status: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof keyopollsNotificationsApiFcmToggleAllEmailNotifications>>,
  TError,
  { status: string },
  TContext
> => {
  const mutationOptions =
    getKeyopollsNotificationsApiFcmToggleAllEmailNotificationsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Enable or disable in-app notifications for all notification types
Status should be 'enable' or 'disable'
 * @summary Toggle All In App Notifications
 */
export const keyopollsNotificationsApiFcmToggleAllInAppNotifications = (
  status: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<FCMResponse>(
    { url: `/api/notifications/fcm/preferences/in-app/${status}/`, method: 'POST', signal },
    options
  );
};

export const getKeyopollsNotificationsApiFcmToggleAllInAppNotificationsMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof keyopollsNotificationsApiFcmToggleAllInAppNotifications>>,
    TError,
    { status: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof keyopollsNotificationsApiFcmToggleAllInAppNotifications>>,
  TError,
  { status: string },
  TContext
> => {
  const mutationKey = ['keyopollsNotificationsApiFcmToggleAllInAppNotifications'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof keyopollsNotificationsApiFcmToggleAllInAppNotifications>>,
    { status: string }
  > = (props) => {
    const { status } = props ?? {};

    return keyopollsNotificationsApiFcmToggleAllInAppNotifications(status, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type KeyopollsNotificationsApiFcmToggleAllInAppNotificationsMutationResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsNotificationsApiFcmToggleAllInAppNotifications>>
>;

export type KeyopollsNotificationsApiFcmToggleAllInAppNotificationsMutationError =
  ErrorType<unknown>;

/**
 * @summary Toggle All In App Notifications
 */
export const useKeyopollsNotificationsApiFcmToggleAllInAppNotifications = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof keyopollsNotificationsApiFcmToggleAllInAppNotifications>>,
      TError,
      { status: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof keyopollsNotificationsApiFcmToggleAllInAppNotifications>>,
  TError,
  { status: string },
  TContext
> => {
  const mutationOptions =
    getKeyopollsNotificationsApiFcmToggleAllInAppNotificationsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Get notification statistics for the authenticated profile
 * @summary Get Notification Stats
 */
export const keyopollsNotificationsApiFcmGetNotificationStats = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<KeyopollsNotificationsApiFcmGetNotificationStats200>(
    { url: `/api/notifications/fcm/stats/`, method: 'GET', signal },
    options
  );
};

export const getKeyopollsNotificationsApiFcmGetNotificationStatsQueryKey = () => {
  return [`/api/notifications/fcm/stats/`] as const;
};

export const getKeyopollsNotificationsApiFcmGetNotificationStatsQueryOptions = <
  TData = Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetNotificationStats>>,
  TError = ErrorType<Message>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetNotificationStats>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getKeyopollsNotificationsApiFcmGetNotificationStatsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetNotificationStats>>
  > = ({ signal }) => keyopollsNotificationsApiFcmGetNotificationStats(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetNotificationStats>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type KeyopollsNotificationsApiFcmGetNotificationStatsQueryResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetNotificationStats>>
>;
export type KeyopollsNotificationsApiFcmGetNotificationStatsQueryError = ErrorType<Message>;

export function useKeyopollsNotificationsApiFcmGetNotificationStats<
  TData = Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetNotificationStats>>,
  TError = ErrorType<Message>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetNotificationStats>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetNotificationStats>>,
          TError,
          Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetNotificationStats>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsNotificationsApiFcmGetNotificationStats<
  TData = Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetNotificationStats>>,
  TError = ErrorType<Message>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetNotificationStats>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetNotificationStats>>,
          TError,
          Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetNotificationStats>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsNotificationsApiFcmGetNotificationStats<
  TData = Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetNotificationStats>>,
  TError = ErrorType<Message>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetNotificationStats>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Notification Stats
 */

export function useKeyopollsNotificationsApiFcmGetNotificationStats<
  TData = Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetNotificationStats>>,
  TError = ErrorType<Message>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsNotificationsApiFcmGetNotificationStats>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getKeyopollsNotificationsApiFcmGetNotificationStatsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Test sending a notification to the authenticated profile
 * @summary Test Send Notification
 */
export const keyopollsNotificationsApiFcmTestSendNotification = (
  params: KeyopollsNotificationsApiFcmTestSendNotificationParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<FCMResponse>(
    { url: `/api/notifications/fcm/test/send-to-profile/`, method: 'POST', params, signal },
    options
  );
};

export const getKeyopollsNotificationsApiFcmTestSendNotificationMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof keyopollsNotificationsApiFcmTestSendNotification>>,
    TError,
    { params: KeyopollsNotificationsApiFcmTestSendNotificationParams },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof keyopollsNotificationsApiFcmTestSendNotification>>,
  TError,
  { params: KeyopollsNotificationsApiFcmTestSendNotificationParams },
  TContext
> => {
  const mutationKey = ['keyopollsNotificationsApiFcmTestSendNotification'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof keyopollsNotificationsApiFcmTestSendNotification>>,
    { params: KeyopollsNotificationsApiFcmTestSendNotificationParams }
  > = (props) => {
    const { params } = props ?? {};

    return keyopollsNotificationsApiFcmTestSendNotification(params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type KeyopollsNotificationsApiFcmTestSendNotificationMutationResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsNotificationsApiFcmTestSendNotification>>
>;

export type KeyopollsNotificationsApiFcmTestSendNotificationMutationError = ErrorType<unknown>;

/**
 * @summary Test Send Notification
 */
export const useKeyopollsNotificationsApiFcmTestSendNotification = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof keyopollsNotificationsApiFcmTestSendNotification>>,
      TError,
      { params: KeyopollsNotificationsApiFcmTestSendNotificationParams },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof keyopollsNotificationsApiFcmTestSendNotification>>,
  TError,
  { params: KeyopollsNotificationsApiFcmTestSendNotificationParams },
  TContext
> => {
  const mutationOptions =
    getKeyopollsNotificationsApiFcmTestSendNotificationMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Test sending a notification to all members of a community
 * @summary Test Send Community Notification
 */
export const keyopollsNotificationsApiFcmTestSendCommunityNotification = (
  params: KeyopollsNotificationsApiFcmTestSendCommunityNotificationParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<FCMResponse>(
    { url: `/api/notifications/fcm/test/send-to-community/`, method: 'POST', params, signal },
    options
  );
};

export const getKeyopollsNotificationsApiFcmTestSendCommunityNotificationMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof keyopollsNotificationsApiFcmTestSendCommunityNotification>>,
    TError,
    { params: KeyopollsNotificationsApiFcmTestSendCommunityNotificationParams },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof keyopollsNotificationsApiFcmTestSendCommunityNotification>>,
  TError,
  { params: KeyopollsNotificationsApiFcmTestSendCommunityNotificationParams },
  TContext
> => {
  const mutationKey = ['keyopollsNotificationsApiFcmTestSendCommunityNotification'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof keyopollsNotificationsApiFcmTestSendCommunityNotification>>,
    { params: KeyopollsNotificationsApiFcmTestSendCommunityNotificationParams }
  > = (props) => {
    const { params } = props ?? {};

    return keyopollsNotificationsApiFcmTestSendCommunityNotification(params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type KeyopollsNotificationsApiFcmTestSendCommunityNotificationMutationResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsNotificationsApiFcmTestSendCommunityNotification>>
>;

export type KeyopollsNotificationsApiFcmTestSendCommunityNotificationMutationError =
  ErrorType<unknown>;

/**
 * @summary Test Send Community Notification
 */
export const useKeyopollsNotificationsApiFcmTestSendCommunityNotification = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof keyopollsNotificationsApiFcmTestSendCommunityNotification>>,
      TError,
      { params: KeyopollsNotificationsApiFcmTestSendCommunityNotificationParams },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof keyopollsNotificationsApiFcmTestSendCommunityNotification>>,
  TError,
  { params: KeyopollsNotificationsApiFcmTestSendCommunityNotificationParams },
  TContext
> => {
  const mutationOptions =
    getKeyopollsNotificationsApiFcmTestSendCommunityNotificationMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
