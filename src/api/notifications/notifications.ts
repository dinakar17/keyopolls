/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Keyo API
 * API for Keyo Polls app
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { customInstance } from '.././custom-instance';
import type { ErrorType } from '.././custom-instance';
import type {
  KeyopollsNotificationsApiGeneralClearAllNotificationsParams,
  KeyopollsNotificationsApiGeneralGetNotificationsParams,
  KeyopollsNotificationsApiGeneralGetUnreadCount200,
  KeyopollsNotificationsApiGeneralMarkAllNotificationsReadParams,
  Message,
  NotificationActionResponse,
  NotificationSummaryResponse,
  NotificationsListResponse,
} from '.././schemas';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Get notifications for authenticated user with comprehensive filtering options.
 * @summary Get Notifications
 */
export const keyopollsNotificationsApiGeneralGetNotifications = (
  params?: KeyopollsNotificationsApiGeneralGetNotificationsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<NotificationsListResponse>(
    { url: `/api/notifications/general/notifications`, method: 'GET', params, signal },
    options
  );
};

export const getKeyopollsNotificationsApiGeneralGetNotificationsQueryKey = (
  params?: KeyopollsNotificationsApiGeneralGetNotificationsParams
) => {
  return [`/api/notifications/general/notifications`, ...(params ? [params] : [])] as const;
};

export const getKeyopollsNotificationsApiGeneralGetNotificationsQueryOptions = <
  TData = Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetNotifications>>,
  TError = ErrorType<Message>,
>(
  params?: KeyopollsNotificationsApiGeneralGetNotificationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetNotifications>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getKeyopollsNotificationsApiGeneralGetNotificationsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetNotifications>>
  > = ({ signal }) =>
    keyopollsNotificationsApiGeneralGetNotifications(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetNotifications>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type KeyopollsNotificationsApiGeneralGetNotificationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetNotifications>>
>;
export type KeyopollsNotificationsApiGeneralGetNotificationsQueryError = ErrorType<Message>;

export function useKeyopollsNotificationsApiGeneralGetNotifications<
  TData = Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetNotifications>>,
  TError = ErrorType<Message>,
>(
  params: undefined | KeyopollsNotificationsApiGeneralGetNotificationsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetNotifications>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetNotifications>>,
          TError,
          Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetNotifications>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsNotificationsApiGeneralGetNotifications<
  TData = Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetNotifications>>,
  TError = ErrorType<Message>,
>(
  params?: KeyopollsNotificationsApiGeneralGetNotificationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetNotifications>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetNotifications>>,
          TError,
          Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetNotifications>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsNotificationsApiGeneralGetNotifications<
  TData = Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetNotifications>>,
  TError = ErrorType<Message>,
>(
  params?: KeyopollsNotificationsApiGeneralGetNotificationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetNotifications>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Notifications
 */

export function useKeyopollsNotificationsApiGeneralGetNotifications<
  TData = Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetNotifications>>,
  TError = ErrorType<Message>,
>(
  params?: KeyopollsNotificationsApiGeneralGetNotificationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetNotifications>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getKeyopollsNotificationsApiGeneralGetNotificationsQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Mark a specific notification as read
 * @summary Mark Notification Read
 */
export const keyopollsNotificationsApiGeneralMarkNotificationRead = (
  notificationId: number,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<NotificationActionResponse>(
    { url: `/api/notifications/general/notifications/${notificationId}/read`, method: 'PATCH' },
    options
  );
};

export const getKeyopollsNotificationsApiGeneralMarkNotificationReadMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralMarkNotificationRead>>,
    TError,
    { notificationId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralMarkNotificationRead>>,
  TError,
  { notificationId: number },
  TContext
> => {
  const mutationKey = ['keyopollsNotificationsApiGeneralMarkNotificationRead'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralMarkNotificationRead>>,
    { notificationId: number }
  > = (props) => {
    const { notificationId } = props ?? {};

    return keyopollsNotificationsApiGeneralMarkNotificationRead(notificationId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type KeyopollsNotificationsApiGeneralMarkNotificationReadMutationResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralMarkNotificationRead>>
>;

export type KeyopollsNotificationsApiGeneralMarkNotificationReadMutationError = ErrorType<Message>;

/**
 * @summary Mark Notification Read
 */
export const useKeyopollsNotificationsApiGeneralMarkNotificationRead = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralMarkNotificationRead>>,
      TError,
      { notificationId: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralMarkNotificationRead>>,
  TError,
  { notificationId: number },
  TContext
> => {
  const mutationOptions =
    getKeyopollsNotificationsApiGeneralMarkNotificationReadMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Mark a specific notification as clicked
 * @summary Mark Notification Clicked
 */
export const keyopollsNotificationsApiGeneralMarkNotificationClicked = (
  notificationId: number,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<NotificationActionResponse>(
    { url: `/api/notifications/general/notifications/${notificationId}/clicked`, method: 'PATCH' },
    options
  );
};

export const getKeyopollsNotificationsApiGeneralMarkNotificationClickedMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralMarkNotificationClicked>>,
    TError,
    { notificationId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralMarkNotificationClicked>>,
  TError,
  { notificationId: number },
  TContext
> => {
  const mutationKey = ['keyopollsNotificationsApiGeneralMarkNotificationClicked'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralMarkNotificationClicked>>,
    { notificationId: number }
  > = (props) => {
    const { notificationId } = props ?? {};

    return keyopollsNotificationsApiGeneralMarkNotificationClicked(notificationId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type KeyopollsNotificationsApiGeneralMarkNotificationClickedMutationResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralMarkNotificationClicked>>
>;

export type KeyopollsNotificationsApiGeneralMarkNotificationClickedMutationError =
  ErrorType<Message>;

/**
 * @summary Mark Notification Clicked
 */
export const useKeyopollsNotificationsApiGeneralMarkNotificationClicked = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralMarkNotificationClicked>>,
      TError,
      { notificationId: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralMarkNotificationClicked>>,
  TError,
  { notificationId: number },
  TContext
> => {
  const mutationOptions =
    getKeyopollsNotificationsApiGeneralMarkNotificationClickedMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Mark all notifications as read for the authenticated user
 * @summary Mark All Notifications Read
 */
export const keyopollsNotificationsApiGeneralMarkAllNotificationsRead = (
  params?: KeyopollsNotificationsApiGeneralMarkAllNotificationsReadParams,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<NotificationActionResponse>(
    { url: `/api/notifications/general/notifications/read-all`, method: 'PATCH', params },
    options
  );
};

export const getKeyopollsNotificationsApiGeneralMarkAllNotificationsReadMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralMarkAllNotificationsRead>>,
    TError,
    { params?: KeyopollsNotificationsApiGeneralMarkAllNotificationsReadParams },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralMarkAllNotificationsRead>>,
  TError,
  { params?: KeyopollsNotificationsApiGeneralMarkAllNotificationsReadParams },
  TContext
> => {
  const mutationKey = ['keyopollsNotificationsApiGeneralMarkAllNotificationsRead'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralMarkAllNotificationsRead>>,
    { params?: KeyopollsNotificationsApiGeneralMarkAllNotificationsReadParams }
  > = (props) => {
    const { params } = props ?? {};

    return keyopollsNotificationsApiGeneralMarkAllNotificationsRead(params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type KeyopollsNotificationsApiGeneralMarkAllNotificationsReadMutationResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralMarkAllNotificationsRead>>
>;

export type KeyopollsNotificationsApiGeneralMarkAllNotificationsReadMutationError =
  ErrorType<Message>;

/**
 * @summary Mark All Notifications Read
 */
export const useKeyopollsNotificationsApiGeneralMarkAllNotificationsRead = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralMarkAllNotificationsRead>>,
      TError,
      { params?: KeyopollsNotificationsApiGeneralMarkAllNotificationsReadParams },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralMarkAllNotificationsRead>>,
  TError,
  { params?: KeyopollsNotificationsApiGeneralMarkAllNotificationsReadParams },
  TContext
> => {
  const mutationOptions =
    getKeyopollsNotificationsApiGeneralMarkAllNotificationsReadMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Delete a specific notification
 * @summary Delete Notification
 */
export const keyopollsNotificationsApiGeneralDeleteNotification = (
  notificationId: number,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<NotificationActionResponse>(
    { url: `/api/notifications/general/notifications/${notificationId}`, method: 'DELETE' },
    options
  );
};

export const getKeyopollsNotificationsApiGeneralDeleteNotificationMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralDeleteNotification>>,
    TError,
    { notificationId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralDeleteNotification>>,
  TError,
  { notificationId: number },
  TContext
> => {
  const mutationKey = ['keyopollsNotificationsApiGeneralDeleteNotification'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralDeleteNotification>>,
    { notificationId: number }
  > = (props) => {
    const { notificationId } = props ?? {};

    return keyopollsNotificationsApiGeneralDeleteNotification(notificationId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type KeyopollsNotificationsApiGeneralDeleteNotificationMutationResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralDeleteNotification>>
>;

export type KeyopollsNotificationsApiGeneralDeleteNotificationMutationError = ErrorType<Message>;

/**
 * @summary Delete Notification
 */
export const useKeyopollsNotificationsApiGeneralDeleteNotification = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralDeleteNotification>>,
      TError,
      { notificationId: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralDeleteNotification>>,
  TError,
  { notificationId: number },
  TContext
> => {
  const mutationOptions =
    getKeyopollsNotificationsApiGeneralDeleteNotificationMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Clear all notifications for the authenticated user
 * @summary Clear All Notifications
 */
export const keyopollsNotificationsApiGeneralClearAllNotifications = (
  params?: KeyopollsNotificationsApiGeneralClearAllNotificationsParams,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<NotificationActionResponse>(
    { url: `/api/notifications/general/notifications/clear-all`, method: 'DELETE', params },
    options
  );
};

export const getKeyopollsNotificationsApiGeneralClearAllNotificationsMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralClearAllNotifications>>,
    TError,
    { params?: KeyopollsNotificationsApiGeneralClearAllNotificationsParams },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralClearAllNotifications>>,
  TError,
  { params?: KeyopollsNotificationsApiGeneralClearAllNotificationsParams },
  TContext
> => {
  const mutationKey = ['keyopollsNotificationsApiGeneralClearAllNotifications'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralClearAllNotifications>>,
    { params?: KeyopollsNotificationsApiGeneralClearAllNotificationsParams }
  > = (props) => {
    const { params } = props ?? {};

    return keyopollsNotificationsApiGeneralClearAllNotifications(params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type KeyopollsNotificationsApiGeneralClearAllNotificationsMutationResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralClearAllNotifications>>
>;

export type KeyopollsNotificationsApiGeneralClearAllNotificationsMutationError = ErrorType<Message>;

/**
 * @summary Clear All Notifications
 */
export const useKeyopollsNotificationsApiGeneralClearAllNotifications = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralClearAllNotifications>>,
      TError,
      { params?: KeyopollsNotificationsApiGeneralClearAllNotificationsParams },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralClearAllNotifications>>,
  TError,
  { params?: KeyopollsNotificationsApiGeneralClearAllNotificationsParams },
  TContext
> => {
  const mutationOptions =
    getKeyopollsNotificationsApiGeneralClearAllNotificationsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Get summary statistics for user's notifications
 * @summary Get Notifications Summary
 */
export const keyopollsNotificationsApiGeneralGetNotificationsSummary = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<NotificationSummaryResponse>(
    { url: `/api/notifications/general/notifications_summary`, method: 'GET', signal },
    options
  );
};

export const getKeyopollsNotificationsApiGeneralGetNotificationsSummaryQueryKey = () => {
  return [`/api/notifications/general/notifications_summary`] as const;
};

export const getKeyopollsNotificationsApiGeneralGetNotificationsSummaryQueryOptions = <
  TData = Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetNotificationsSummary>>,
  TError = ErrorType<Message>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetNotificationsSummary>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getKeyopollsNotificationsApiGeneralGetNotificationsSummaryQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetNotificationsSummary>>
  > = ({ signal }) =>
    keyopollsNotificationsApiGeneralGetNotificationsSummary(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetNotificationsSummary>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type KeyopollsNotificationsApiGeneralGetNotificationsSummaryQueryResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetNotificationsSummary>>
>;
export type KeyopollsNotificationsApiGeneralGetNotificationsSummaryQueryError = ErrorType<Message>;

export function useKeyopollsNotificationsApiGeneralGetNotificationsSummary<
  TData = Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetNotificationsSummary>>,
  TError = ErrorType<Message>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetNotificationsSummary>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetNotificationsSummary>>,
          TError,
          Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetNotificationsSummary>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsNotificationsApiGeneralGetNotificationsSummary<
  TData = Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetNotificationsSummary>>,
  TError = ErrorType<Message>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetNotificationsSummary>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetNotificationsSummary>>,
          TError,
          Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetNotificationsSummary>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsNotificationsApiGeneralGetNotificationsSummary<
  TData = Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetNotificationsSummary>>,
  TError = ErrorType<Message>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetNotificationsSummary>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Notifications Summary
 */

export function useKeyopollsNotificationsApiGeneralGetNotificationsSummary<
  TData = Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetNotificationsSummary>>,
  TError = ErrorType<Message>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetNotificationsSummary>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions =
    getKeyopollsNotificationsApiGeneralGetNotificationsSummaryQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get quick unread count for badges/indicators
 * @summary Get Unread Count
 */
export const keyopollsNotificationsApiGeneralGetUnreadCount = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<KeyopollsNotificationsApiGeneralGetUnreadCount200>(
    { url: `/api/notifications/general/notifications/unread-count`, method: 'GET', signal },
    options
  );
};

export const getKeyopollsNotificationsApiGeneralGetUnreadCountQueryKey = () => {
  return [`/api/notifications/general/notifications/unread-count`] as const;
};

export const getKeyopollsNotificationsApiGeneralGetUnreadCountQueryOptions = <
  TData = Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetUnreadCount>>,
  TError = ErrorType<Message>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetUnreadCount>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getKeyopollsNotificationsApiGeneralGetUnreadCountQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetUnreadCount>>
  > = ({ signal }) => keyopollsNotificationsApiGeneralGetUnreadCount(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetUnreadCount>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type KeyopollsNotificationsApiGeneralGetUnreadCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetUnreadCount>>
>;
export type KeyopollsNotificationsApiGeneralGetUnreadCountQueryError = ErrorType<Message>;

export function useKeyopollsNotificationsApiGeneralGetUnreadCount<
  TData = Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetUnreadCount>>,
  TError = ErrorType<Message>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetUnreadCount>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetUnreadCount>>,
          TError,
          Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetUnreadCount>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsNotificationsApiGeneralGetUnreadCount<
  TData = Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetUnreadCount>>,
  TError = ErrorType<Message>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetUnreadCount>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetUnreadCount>>,
          TError,
          Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetUnreadCount>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsNotificationsApiGeneralGetUnreadCount<
  TData = Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetUnreadCount>>,
  TError = ErrorType<Message>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetUnreadCount>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Unread Count
 */

export function useKeyopollsNotificationsApiGeneralGetUnreadCount<
  TData = Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetUnreadCount>>,
  TError = ErrorType<Message>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsNotificationsApiGeneralGetUnreadCount>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getKeyopollsNotificationsApiGeneralGetUnreadCountQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
