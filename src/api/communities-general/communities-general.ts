/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Keyo API
 * API for Keyo Polls app
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { customInstance } from '.././custom-instance';
import type { ErrorType } from '.././custom-instance';
import type {
  CommunityDetails,
  CommunityListResponse,
  KeyopollsCommunitiesApiGeneralListCommunitiesParams,
  Message,
} from '.././schemas';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Get a single community by ID.
Handles all visibility rules and user-specific data.
 * @summary Get Community
 */
export const keyopollsCommunitiesApiGeneralGetCommunity = (
  communityName: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<CommunityDetails>(
    { url: `/api/communities/general/communities/${communityName}`, method: 'GET', signal },
    options
  );
};

export const getKeyopollsCommunitiesApiGeneralGetCommunityQueryKey = (communityName: string) => {
  return [`/api/communities/general/communities/${communityName}`] as const;
};

export const getKeyopollsCommunitiesApiGeneralGetCommunityQueryOptions = <
  TData = Awaited<ReturnType<typeof keyopollsCommunitiesApiGeneralGetCommunity>>,
  TError = ErrorType<Message>,
>(
  communityName: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommunitiesApiGeneralGetCommunity>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getKeyopollsCommunitiesApiGeneralGetCommunityQueryKey(communityName);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof keyopollsCommunitiesApiGeneralGetCommunity>>
  > = ({ signal }) =>
    keyopollsCommunitiesApiGeneralGetCommunity(communityName, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!communityName, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof keyopollsCommunitiesApiGeneralGetCommunity>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type KeyopollsCommunitiesApiGeneralGetCommunityQueryResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsCommunitiesApiGeneralGetCommunity>>
>;
export type KeyopollsCommunitiesApiGeneralGetCommunityQueryError = ErrorType<Message>;

export function useKeyopollsCommunitiesApiGeneralGetCommunity<
  TData = Awaited<ReturnType<typeof keyopollsCommunitiesApiGeneralGetCommunity>>,
  TError = ErrorType<Message>,
>(
  communityName: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommunitiesApiGeneralGetCommunity>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsCommunitiesApiGeneralGetCommunity>>,
          TError,
          Awaited<ReturnType<typeof keyopollsCommunitiesApiGeneralGetCommunity>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsCommunitiesApiGeneralGetCommunity<
  TData = Awaited<ReturnType<typeof keyopollsCommunitiesApiGeneralGetCommunity>>,
  TError = ErrorType<Message>,
>(
  communityName: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommunitiesApiGeneralGetCommunity>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsCommunitiesApiGeneralGetCommunity>>,
          TError,
          Awaited<ReturnType<typeof keyopollsCommunitiesApiGeneralGetCommunity>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsCommunitiesApiGeneralGetCommunity<
  TData = Awaited<ReturnType<typeof keyopollsCommunitiesApiGeneralGetCommunity>>,
  TError = ErrorType<Message>,
>(
  communityName: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommunitiesApiGeneralGetCommunity>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Community
 */

export function useKeyopollsCommunitiesApiGeneralGetCommunity<
  TData = Awaited<ReturnType<typeof keyopollsCommunitiesApiGeneralGetCommunity>>,
  TError = ErrorType<Message>,
>(
  communityName: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommunitiesApiGeneralGetCommunity>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getKeyopollsCommunitiesApiGeneralGetCommunityQueryOptions(
    communityName,
    options
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * List communities with comprehensive filtering, searching, and pagination.
Handles all possible use cases in a single endpoint.
 * @summary List Communities
 */
export const keyopollsCommunitiesApiGeneralListCommunities = (
  params?: KeyopollsCommunitiesApiGeneralListCommunitiesParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<CommunityListResponse>(
    { url: `/api/communities/general/communities`, method: 'GET', params, signal },
    options
  );
};

export const getKeyopollsCommunitiesApiGeneralListCommunitiesQueryKey = (
  params?: KeyopollsCommunitiesApiGeneralListCommunitiesParams
) => {
  return [`/api/communities/general/communities`, ...(params ? [params] : [])] as const;
};

export const getKeyopollsCommunitiesApiGeneralListCommunitiesQueryOptions = <
  TData = Awaited<ReturnType<typeof keyopollsCommunitiesApiGeneralListCommunities>>,
  TError = ErrorType<Message>,
>(
  params?: KeyopollsCommunitiesApiGeneralListCommunitiesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommunitiesApiGeneralListCommunities>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getKeyopollsCommunitiesApiGeneralListCommunitiesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof keyopollsCommunitiesApiGeneralListCommunities>>
  > = ({ signal }) => keyopollsCommunitiesApiGeneralListCommunities(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof keyopollsCommunitiesApiGeneralListCommunities>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type KeyopollsCommunitiesApiGeneralListCommunitiesQueryResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsCommunitiesApiGeneralListCommunities>>
>;
export type KeyopollsCommunitiesApiGeneralListCommunitiesQueryError = ErrorType<Message>;

export function useKeyopollsCommunitiesApiGeneralListCommunities<
  TData = Awaited<ReturnType<typeof keyopollsCommunitiesApiGeneralListCommunities>>,
  TError = ErrorType<Message>,
>(
  params: undefined | KeyopollsCommunitiesApiGeneralListCommunitiesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommunitiesApiGeneralListCommunities>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsCommunitiesApiGeneralListCommunities>>,
          TError,
          Awaited<ReturnType<typeof keyopollsCommunitiesApiGeneralListCommunities>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsCommunitiesApiGeneralListCommunities<
  TData = Awaited<ReturnType<typeof keyopollsCommunitiesApiGeneralListCommunities>>,
  TError = ErrorType<Message>,
>(
  params?: KeyopollsCommunitiesApiGeneralListCommunitiesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommunitiesApiGeneralListCommunities>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsCommunitiesApiGeneralListCommunities>>,
          TError,
          Awaited<ReturnType<typeof keyopollsCommunitiesApiGeneralListCommunities>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsCommunitiesApiGeneralListCommunities<
  TData = Awaited<ReturnType<typeof keyopollsCommunitiesApiGeneralListCommunities>>,
  TError = ErrorType<Message>,
>(
  params?: KeyopollsCommunitiesApiGeneralListCommunitiesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommunitiesApiGeneralListCommunities>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary List Communities
 */

export function useKeyopollsCommunitiesApiGeneralListCommunities<
  TData = Awaited<ReturnType<typeof keyopollsCommunitiesApiGeneralListCommunities>>,
  TError = ErrorType<Message>,
>(
  params?: KeyopollsCommunitiesApiGeneralListCommunitiesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommunitiesApiGeneralListCommunities>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getKeyopollsCommunitiesApiGeneralListCommunitiesQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
