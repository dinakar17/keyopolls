/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Keyo API
 * API for Keyo Polls app
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { customInstance } from '.././custom-instance';
import type { ErrorType } from '.././custom-instance';
import type {
  KeyopollsCommonApiInsightsGetCommunityInsights200,
  KeyopollsCommonApiInsightsGetPollVotingInsights200,
  PollInsightsSchema,
} from '.././schemas';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Get comprehensive insights for a specific poll including:
- Poll details and voting statistics
- 48-hour hourly view breakdown
- Top countries by views (as percentages)
- Total analytics
 * @summary Get Poll Insights
 */
export const keyopollsCommonApiInsightsGetPollInsights = (
  pollId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<PollInsightsSchema>(
    { url: `/api/common/insights/polls/${pollId}/insights`, method: 'GET', signal },
    options
  );
};

export const getKeyopollsCommonApiInsightsGetPollInsightsQueryKey = (pollId: number) => {
  return [`/api/common/insights/polls/${pollId}/insights`] as const;
};

export const getKeyopollsCommonApiInsightsGetPollInsightsQueryOptions = <
  TData = Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetPollInsights>>,
  TError = ErrorType<unknown>,
>(
  pollId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetPollInsights>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getKeyopollsCommonApiInsightsGetPollInsightsQueryKey(pollId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetPollInsights>>
  > = ({ signal }) => keyopollsCommonApiInsightsGetPollInsights(pollId, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!pollId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetPollInsights>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type KeyopollsCommonApiInsightsGetPollInsightsQueryResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetPollInsights>>
>;
export type KeyopollsCommonApiInsightsGetPollInsightsQueryError = ErrorType<unknown>;

export function useKeyopollsCommonApiInsightsGetPollInsights<
  TData = Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetPollInsights>>,
  TError = ErrorType<unknown>,
>(
  pollId: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetPollInsights>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetPollInsights>>,
          TError,
          Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetPollInsights>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsCommonApiInsightsGetPollInsights<
  TData = Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetPollInsights>>,
  TError = ErrorType<unknown>,
>(
  pollId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetPollInsights>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetPollInsights>>,
          TError,
          Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetPollInsights>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsCommonApiInsightsGetPollInsights<
  TData = Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetPollInsights>>,
  TError = ErrorType<unknown>,
>(
  pollId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetPollInsights>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Poll Insights
 */

export function useKeyopollsCommonApiInsightsGetPollInsights<
  TData = Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetPollInsights>>,
  TError = ErrorType<unknown>,
>(
  pollId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetPollInsights>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getKeyopollsCommonApiInsightsGetPollInsightsQueryOptions(pollId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get detailed voting insights for a poll including:
- Vote distribution by option
- Voting timeline
- Voter demographics (if available)
 * @summary Get Poll Voting Insights
 */
export const keyopollsCommonApiInsightsGetPollVotingInsights = (
  pollId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<KeyopollsCommonApiInsightsGetPollVotingInsights200>(
    { url: `/api/common/insights/polls/${pollId}/voting-insights`, method: 'GET', signal },
    options
  );
};

export const getKeyopollsCommonApiInsightsGetPollVotingInsightsQueryKey = (pollId: number) => {
  return [`/api/common/insights/polls/${pollId}/voting-insights`] as const;
};

export const getKeyopollsCommonApiInsightsGetPollVotingInsightsQueryOptions = <
  TData = Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetPollVotingInsights>>,
  TError = ErrorType<unknown>,
>(
  pollId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetPollVotingInsights>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getKeyopollsCommonApiInsightsGetPollVotingInsightsQueryKey(pollId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetPollVotingInsights>>
  > = ({ signal }) =>
    keyopollsCommonApiInsightsGetPollVotingInsights(pollId, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!pollId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetPollVotingInsights>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type KeyopollsCommonApiInsightsGetPollVotingInsightsQueryResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetPollVotingInsights>>
>;
export type KeyopollsCommonApiInsightsGetPollVotingInsightsQueryError = ErrorType<unknown>;

export function useKeyopollsCommonApiInsightsGetPollVotingInsights<
  TData = Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetPollVotingInsights>>,
  TError = ErrorType<unknown>,
>(
  pollId: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetPollVotingInsights>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetPollVotingInsights>>,
          TError,
          Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetPollVotingInsights>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsCommonApiInsightsGetPollVotingInsights<
  TData = Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetPollVotingInsights>>,
  TError = ErrorType<unknown>,
>(
  pollId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetPollVotingInsights>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetPollVotingInsights>>,
          TError,
          Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetPollVotingInsights>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsCommonApiInsightsGetPollVotingInsights<
  TData = Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetPollVotingInsights>>,
  TError = ErrorType<unknown>,
>(
  pollId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetPollVotingInsights>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Poll Voting Insights
 */

export function useKeyopollsCommonApiInsightsGetPollVotingInsights<
  TData = Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetPollVotingInsights>>,
  TError = ErrorType<unknown>,
>(
  pollId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetPollVotingInsights>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getKeyopollsCommonApiInsightsGetPollVotingInsightsQueryOptions(
    pollId,
    options
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get insights for a community including:
- Poll performance
- Member engagement
- Growth metrics
 * @summary Get Community Insights
 */
export const keyopollsCommonApiInsightsGetCommunityInsights = (
  communityId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<KeyopollsCommonApiInsightsGetCommunityInsights200>(
    { url: `/api/common/insights/communities/${communityId}/insights`, method: 'GET', signal },
    options
  );
};

export const getKeyopollsCommonApiInsightsGetCommunityInsightsQueryKey = (communityId: number) => {
  return [`/api/common/insights/communities/${communityId}/insights`] as const;
};

export const getKeyopollsCommonApiInsightsGetCommunityInsightsQueryOptions = <
  TData = Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetCommunityInsights>>,
  TError = ErrorType<unknown>,
>(
  communityId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetCommunityInsights>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getKeyopollsCommonApiInsightsGetCommunityInsightsQueryKey(communityId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetCommunityInsights>>
  > = ({ signal }) =>
    keyopollsCommonApiInsightsGetCommunityInsights(communityId, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!communityId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetCommunityInsights>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type KeyopollsCommonApiInsightsGetCommunityInsightsQueryResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetCommunityInsights>>
>;
export type KeyopollsCommonApiInsightsGetCommunityInsightsQueryError = ErrorType<unknown>;

export function useKeyopollsCommonApiInsightsGetCommunityInsights<
  TData = Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetCommunityInsights>>,
  TError = ErrorType<unknown>,
>(
  communityId: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetCommunityInsights>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetCommunityInsights>>,
          TError,
          Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetCommunityInsights>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsCommonApiInsightsGetCommunityInsights<
  TData = Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetCommunityInsights>>,
  TError = ErrorType<unknown>,
>(
  communityId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetCommunityInsights>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetCommunityInsights>>,
          TError,
          Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetCommunityInsights>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsCommonApiInsightsGetCommunityInsights<
  TData = Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetCommunityInsights>>,
  TError = ErrorType<unknown>,
>(
  communityId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetCommunityInsights>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Community Insights
 */

export function useKeyopollsCommonApiInsightsGetCommunityInsights<
  TData = Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetCommunityInsights>>,
  TError = ErrorType<unknown>,
>(
  communityId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommonApiInsightsGetCommunityInsights>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getKeyopollsCommonApiInsightsGetCommunityInsightsQueryOptions(
    communityId,
    options
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
