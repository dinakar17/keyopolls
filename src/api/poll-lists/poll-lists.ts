/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Keyo API
 * API for Keyo Polls app
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { customInstance } from '.././custom-instance';
import type { BodyType, ErrorType } from '.././custom-instance';
import type {
  KeyopollsPollsApiListsCreatePollListBody,
  KeyopollsPollsApiListsGetPollListsParams,
  KeyopollsPollsApiListsUpdatePollListBody,
  ManagePollInListResponseSchema,
  ManagePollInListSchema,
  Message,
  PollListDetailsSchema,
  PollListsListResponseSchema,
} from '.././schemas';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Create a new poll list or folder
 * @summary Create Poll List
 */
export const keyopollsPollsApiListsCreatePollList = (
  keyopollsPollsApiListsCreatePollListBody: BodyType<KeyopollsPollsApiListsCreatePollListBody>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  const formData = new FormData();
  if (keyopollsPollsApiListsCreatePollListBody.image !== undefined) {
    formData.append(`image`, keyopollsPollsApiListsCreatePollListBody.image);
  }
  formData.append(`data`, JSON.stringify(keyopollsPollsApiListsCreatePollListBody.data));

  return customInstance<PollListDetailsSchema>(
    {
      url: `/api/polls/lists/lists`,
      method: 'POST',
      headers: { 'Content-Type': 'multipart/form-data' },
      data: formData,
      signal,
    },
    options
  );
};

export const getKeyopollsPollsApiListsCreatePollListMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof keyopollsPollsApiListsCreatePollList>>,
    TError,
    { data: BodyType<KeyopollsPollsApiListsCreatePollListBody> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof keyopollsPollsApiListsCreatePollList>>,
  TError,
  { data: BodyType<KeyopollsPollsApiListsCreatePollListBody> },
  TContext
> => {
  const mutationKey = ['keyopollsPollsApiListsCreatePollList'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof keyopollsPollsApiListsCreatePollList>>,
    { data: BodyType<KeyopollsPollsApiListsCreatePollListBody> }
  > = (props) => {
    const { data } = props ?? {};

    return keyopollsPollsApiListsCreatePollList(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type KeyopollsPollsApiListsCreatePollListMutationResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsPollsApiListsCreatePollList>>
>;
export type KeyopollsPollsApiListsCreatePollListMutationBody =
  BodyType<KeyopollsPollsApiListsCreatePollListBody>;
export type KeyopollsPollsApiListsCreatePollListMutationError = ErrorType<Message>;

/**
 * @summary Create Poll List
 */
export const useKeyopollsPollsApiListsCreatePollList = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof keyopollsPollsApiListsCreatePollList>>,
      TError,
      { data: BodyType<KeyopollsPollsApiListsCreatePollListBody> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof keyopollsPollsApiListsCreatePollList>>,
  TError,
  { data: BodyType<KeyopollsPollsApiListsCreatePollListBody> },
  TContext
> => {
  const mutationOptions = getKeyopollsPollsApiListsCreatePollListMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Get poll lists for the authenticated user with filtering and pagination

Features:
- Pagination with customizable page size
- Filter by list type, visibility, community, parent folder
- Search in title and description
- Multiple ordering options
- Includes user's own lists + collaborative lists they have access to
- Hierarchical filtering (show only root level or specific parent)
 * @summary Get Poll Lists
 */
export const keyopollsPollsApiListsGetPollLists = (
  params?: KeyopollsPollsApiListsGetPollListsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<PollListsListResponseSchema>(
    { url: `/api/polls/lists/lists`, method: 'GET', params, signal },
    options
  );
};

export const getKeyopollsPollsApiListsGetPollListsQueryKey = (
  params?: KeyopollsPollsApiListsGetPollListsParams
) => {
  return [`/api/polls/lists/lists`, ...(params ? [params] : [])] as const;
};

export const getKeyopollsPollsApiListsGetPollListsQueryOptions = <
  TData = Awaited<ReturnType<typeof keyopollsPollsApiListsGetPollLists>>,
  TError = ErrorType<Message>,
>(
  params?: KeyopollsPollsApiListsGetPollListsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof keyopollsPollsApiListsGetPollLists>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getKeyopollsPollsApiListsGetPollListsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof keyopollsPollsApiListsGetPollLists>>> = ({
    signal,
  }) => keyopollsPollsApiListsGetPollLists(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof keyopollsPollsApiListsGetPollLists>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type KeyopollsPollsApiListsGetPollListsQueryResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsPollsApiListsGetPollLists>>
>;
export type KeyopollsPollsApiListsGetPollListsQueryError = ErrorType<Message>;

export function useKeyopollsPollsApiListsGetPollLists<
  TData = Awaited<ReturnType<typeof keyopollsPollsApiListsGetPollLists>>,
  TError = ErrorType<Message>,
>(
  params: undefined | KeyopollsPollsApiListsGetPollListsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof keyopollsPollsApiListsGetPollLists>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsPollsApiListsGetPollLists>>,
          TError,
          Awaited<ReturnType<typeof keyopollsPollsApiListsGetPollLists>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsPollsApiListsGetPollLists<
  TData = Awaited<ReturnType<typeof keyopollsPollsApiListsGetPollLists>>,
  TError = ErrorType<Message>,
>(
  params?: KeyopollsPollsApiListsGetPollListsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof keyopollsPollsApiListsGetPollLists>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsPollsApiListsGetPollLists>>,
          TError,
          Awaited<ReturnType<typeof keyopollsPollsApiListsGetPollLists>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsPollsApiListsGetPollLists<
  TData = Awaited<ReturnType<typeof keyopollsPollsApiListsGetPollLists>>,
  TError = ErrorType<Message>,
>(
  params?: KeyopollsPollsApiListsGetPollListsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof keyopollsPollsApiListsGetPollLists>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Poll Lists
 */

export function useKeyopollsPollsApiListsGetPollLists<
  TData = Awaited<ReturnType<typeof keyopollsPollsApiListsGetPollLists>>,
  TError = ErrorType<Message>,
>(
  params?: KeyopollsPollsApiListsGetPollListsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof keyopollsPollsApiListsGetPollLists>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getKeyopollsPollsApiListsGetPollListsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Add, remove, or toggle a poll in a poll list
 * @summary Manage Poll In List
 */
export const keyopollsPollsApiListsManagePollInList = (
  listId: number,
  managePollInListSchema: BodyType<ManagePollInListSchema>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<ManagePollInListResponseSchema>(
    {
      url: `/api/polls/lists/lists/${listId}/polls`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: managePollInListSchema,
      signal,
    },
    options
  );
};

export const getKeyopollsPollsApiListsManagePollInListMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof keyopollsPollsApiListsManagePollInList>>,
    TError,
    { listId: number; data: BodyType<ManagePollInListSchema> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof keyopollsPollsApiListsManagePollInList>>,
  TError,
  { listId: number; data: BodyType<ManagePollInListSchema> },
  TContext
> => {
  const mutationKey = ['keyopollsPollsApiListsManagePollInList'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof keyopollsPollsApiListsManagePollInList>>,
    { listId: number; data: BodyType<ManagePollInListSchema> }
  > = (props) => {
    const { listId, data } = props ?? {};

    return keyopollsPollsApiListsManagePollInList(listId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type KeyopollsPollsApiListsManagePollInListMutationResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsPollsApiListsManagePollInList>>
>;
export type KeyopollsPollsApiListsManagePollInListMutationBody = BodyType<ManagePollInListSchema>;
export type KeyopollsPollsApiListsManagePollInListMutationError = ErrorType<Message>;

/**
 * @summary Manage Poll In List
 */
export const useKeyopollsPollsApiListsManagePollInList = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof keyopollsPollsApiListsManagePollInList>>,
      TError,
      { listId: number; data: BodyType<ManagePollInListSchema> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof keyopollsPollsApiListsManagePollInList>>,
  TError,
  { listId: number; data: BodyType<ManagePollInListSchema> },
  TContext
> => {
  const mutationOptions = getKeyopollsPollsApiListsManagePollInListMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Update a poll list or folder
 * @summary Update Poll List
 */
export const keyopollsPollsApiListsUpdatePollList = (
  listId: number,
  keyopollsPollsApiListsUpdatePollListBody: BodyType<KeyopollsPollsApiListsUpdatePollListBody>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  const formData = new FormData();
  if (keyopollsPollsApiListsUpdatePollListBody.image !== undefined) {
    formData.append(`image`, keyopollsPollsApiListsUpdatePollListBody.image);
  }
  formData.append(`data`, JSON.stringify(keyopollsPollsApiListsUpdatePollListBody.data));

  return customInstance<PollListDetailsSchema>(
    {
      url: `/api/polls/lists/lists/update-poll/${listId}`,
      method: 'POST',
      headers: { 'Content-Type': 'multipart/form-data' },
      data: formData,
      signal,
    },
    options
  );
};

export const getKeyopollsPollsApiListsUpdatePollListMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof keyopollsPollsApiListsUpdatePollList>>,
    TError,
    { listId: number; data: BodyType<KeyopollsPollsApiListsUpdatePollListBody> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof keyopollsPollsApiListsUpdatePollList>>,
  TError,
  { listId: number; data: BodyType<KeyopollsPollsApiListsUpdatePollListBody> },
  TContext
> => {
  const mutationKey = ['keyopollsPollsApiListsUpdatePollList'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof keyopollsPollsApiListsUpdatePollList>>,
    { listId: number; data: BodyType<KeyopollsPollsApiListsUpdatePollListBody> }
  > = (props) => {
    const { listId, data } = props ?? {};

    return keyopollsPollsApiListsUpdatePollList(listId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type KeyopollsPollsApiListsUpdatePollListMutationResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsPollsApiListsUpdatePollList>>
>;
export type KeyopollsPollsApiListsUpdatePollListMutationBody =
  BodyType<KeyopollsPollsApiListsUpdatePollListBody>;
export type KeyopollsPollsApiListsUpdatePollListMutationError = ErrorType<Message>;

/**
 * @summary Update Poll List
 */
export const useKeyopollsPollsApiListsUpdatePollList = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof keyopollsPollsApiListsUpdatePollList>>,
      TError,
      { listId: number; data: BodyType<KeyopollsPollsApiListsUpdatePollListBody> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof keyopollsPollsApiListsUpdatePollList>>,
  TError,
  { listId: number; data: BodyType<KeyopollsPollsApiListsUpdatePollListBody> },
  TContext
> => {
  const mutationOptions = getKeyopollsPollsApiListsUpdatePollListMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
