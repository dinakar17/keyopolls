/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Keyo API
 * API for Keyo Polls app
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { customInstance } from '.././custom-instance';
import type { BodyType, ErrorType } from '.././custom-instance';
import type {
  CommentDeleteSchema,
  CommentResponse,
  CommentThreadResponse,
  KeyopollsCommentsApiCreateCommentBody,
  KeyopollsCommentsApiGetCommentThreadParams,
  KeyopollsCommentsApiGetCommentsParams,
  KeyopollsCommentsApiUpdateCommentBody,
  Message,
  PaginatedCommentResponse,
} from '.././schemas';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Create a new comment on a content object using pseudonymous profile
 * @summary Create Comment
 */
export const keyopollsCommentsApiCreateComment = (
  contentType: 'Poll' | 'GenericComment' | 'Article' | 'PollTodo',
  objectId: number,
  keyopollsCommentsApiCreateCommentBody: BodyType<KeyopollsCommentsApiCreateCommentBody>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  const formData = new FormData();
  if (keyopollsCommentsApiCreateCommentBody.media_files !== undefined) {
    keyopollsCommentsApiCreateCommentBody.media_files.forEach((value) =>
      formData.append(`media_files`, value)
    );
  }
  formData.append(`data`, JSON.stringify(keyopollsCommentsApiCreateCommentBody.data));

  return customInstance<CommentResponse>(
    {
      url: `/api/comments/${contentType}/${objectId}/comments`,
      method: 'POST',
      headers: { 'Content-Type': 'multipart/form-data' },
      data: formData,
      signal,
    },
    options
  );
};

export const getKeyopollsCommentsApiCreateCommentMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof keyopollsCommentsApiCreateComment>>,
    TError,
    {
      contentType: 'Poll' | 'GenericComment' | 'Article' | 'PollTodo';
      objectId: number;
      data: BodyType<KeyopollsCommentsApiCreateCommentBody>;
    },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof keyopollsCommentsApiCreateComment>>,
  TError,
  {
    contentType: 'Poll' | 'GenericComment' | 'Article' | 'PollTodo';
    objectId: number;
    data: BodyType<KeyopollsCommentsApiCreateCommentBody>;
  },
  TContext
> => {
  const mutationKey = ['keyopollsCommentsApiCreateComment'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof keyopollsCommentsApiCreateComment>>,
    {
      contentType: 'Poll' | 'GenericComment' | 'Article' | 'PollTodo';
      objectId: number;
      data: BodyType<KeyopollsCommentsApiCreateCommentBody>;
    }
  > = (props) => {
    const { contentType, objectId, data } = props ?? {};

    return keyopollsCommentsApiCreateComment(contentType, objectId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type KeyopollsCommentsApiCreateCommentMutationResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsCommentsApiCreateComment>>
>;
export type KeyopollsCommentsApiCreateCommentMutationBody =
  BodyType<KeyopollsCommentsApiCreateCommentBody>;
export type KeyopollsCommentsApiCreateCommentMutationError = ErrorType<Message>;

/**
 * @summary Create Comment
 */
export const useKeyopollsCommentsApiCreateComment = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof keyopollsCommentsApiCreateComment>>,
      TError,
      {
        contentType: 'Poll' | 'GenericComment' | 'Article' | 'PollTodo';
        objectId: number;
        data: BodyType<KeyopollsCommentsApiCreateCommentBody>;
      },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof keyopollsCommentsApiCreateComment>>,
  TError,
  {
    contentType: 'Poll' | 'GenericComment' | 'Article' | 'PollTodo';
    objectId: number;
    data: BodyType<KeyopollsCommentsApiCreateCommentBody>;
  },
  TContext
> => {
  const mutationOptions = getKeyopollsCommentsApiCreateCommentMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Get paginated top-level comments with nested replies up to depth 6
 * @summary Get Comments
 */
export const keyopollsCommentsApiGetComments = (
  contentType: 'Poll' | 'GenericComment' | 'Article' | 'PollTodo',
  objectId: number,
  params?: KeyopollsCommentsApiGetCommentsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<PaginatedCommentResponse>(
    { url: `/api/comments/${contentType}/${objectId}/comments`, method: 'GET', params, signal },
    options
  );
};

export const getKeyopollsCommentsApiGetCommentsQueryKey = (
  contentType: 'Poll' | 'GenericComment' | 'Article' | 'PollTodo',
  objectId: number,
  params?: KeyopollsCommentsApiGetCommentsParams
) => {
  return [
    `/api/comments/${contentType}/${objectId}/comments`,
    ...(params ? [params] : []),
  ] as const;
};

export const getKeyopollsCommentsApiGetCommentsQueryOptions = <
  TData = Awaited<ReturnType<typeof keyopollsCommentsApiGetComments>>,
  TError = ErrorType<Message>,
>(
  contentType: 'Poll' | 'GenericComment' | 'Article' | 'PollTodo',
  objectId: number,
  params?: KeyopollsCommentsApiGetCommentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof keyopollsCommentsApiGetComments>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getKeyopollsCommentsApiGetCommentsQueryKey(contentType, objectId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof keyopollsCommentsApiGetComments>>> = ({
    signal,
  }) => keyopollsCommentsApiGetComments(contentType, objectId, params, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(contentType && objectId),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof keyopollsCommentsApiGetComments>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type KeyopollsCommentsApiGetCommentsQueryResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsCommentsApiGetComments>>
>;
export type KeyopollsCommentsApiGetCommentsQueryError = ErrorType<Message>;

export function useKeyopollsCommentsApiGetComments<
  TData = Awaited<ReturnType<typeof keyopollsCommentsApiGetComments>>,
  TError = ErrorType<Message>,
>(
  contentType: 'Poll' | 'GenericComment' | 'Article' | 'PollTodo',
  objectId: number,
  params: undefined | KeyopollsCommentsApiGetCommentsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof keyopollsCommentsApiGetComments>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsCommentsApiGetComments>>,
          TError,
          Awaited<ReturnType<typeof keyopollsCommentsApiGetComments>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsCommentsApiGetComments<
  TData = Awaited<ReturnType<typeof keyopollsCommentsApiGetComments>>,
  TError = ErrorType<Message>,
>(
  contentType: 'Poll' | 'GenericComment' | 'Article' | 'PollTodo',
  objectId: number,
  params?: KeyopollsCommentsApiGetCommentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof keyopollsCommentsApiGetComments>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsCommentsApiGetComments>>,
          TError,
          Awaited<ReturnType<typeof keyopollsCommentsApiGetComments>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsCommentsApiGetComments<
  TData = Awaited<ReturnType<typeof keyopollsCommentsApiGetComments>>,
  TError = ErrorType<Message>,
>(
  contentType: 'Poll' | 'GenericComment' | 'Article' | 'PollTodo',
  objectId: number,
  params?: KeyopollsCommentsApiGetCommentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof keyopollsCommentsApiGetComments>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Comments
 */

export function useKeyopollsCommentsApiGetComments<
  TData = Awaited<ReturnType<typeof keyopollsCommentsApiGetComments>>,
  TError = ErrorType<Message>,
>(
  contentType: 'Poll' | 'GenericComment' | 'Article' | 'PollTodo',
  objectId: number,
  params?: KeyopollsCommentsApiGetCommentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof keyopollsCommentsApiGetComments>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getKeyopollsCommentsApiGetCommentsQueryOptions(
    contentType,
    objectId,
    params,
    options
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Update a comment using pseudonymous profile
 * @summary Update Comment
 */
export const keyopollsCommentsApiUpdateComment = (
  commentId: number,
  keyopollsCommentsApiUpdateCommentBody: BodyType<KeyopollsCommentsApiUpdateCommentBody>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  const formData = new FormData();
  if (keyopollsCommentsApiUpdateCommentBody.media_files !== undefined) {
    keyopollsCommentsApiUpdateCommentBody.media_files.forEach((value) =>
      formData.append(`media_files`, value)
    );
  }
  formData.append(`data`, JSON.stringify(keyopollsCommentsApiUpdateCommentBody.data));

  return customInstance<CommentResponse>(
    {
      url: `/api/comments/comments/${commentId}`,
      method: 'POST',
      headers: { 'Content-Type': 'multipart/form-data' },
      data: formData,
      signal,
    },
    options
  );
};

export const getKeyopollsCommentsApiUpdateCommentMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof keyopollsCommentsApiUpdateComment>>,
    TError,
    { commentId: number; data: BodyType<KeyopollsCommentsApiUpdateCommentBody> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof keyopollsCommentsApiUpdateComment>>,
  TError,
  { commentId: number; data: BodyType<KeyopollsCommentsApiUpdateCommentBody> },
  TContext
> => {
  const mutationKey = ['keyopollsCommentsApiUpdateComment'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof keyopollsCommentsApiUpdateComment>>,
    { commentId: number; data: BodyType<KeyopollsCommentsApiUpdateCommentBody> }
  > = (props) => {
    const { commentId, data } = props ?? {};

    return keyopollsCommentsApiUpdateComment(commentId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type KeyopollsCommentsApiUpdateCommentMutationResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsCommentsApiUpdateComment>>
>;
export type KeyopollsCommentsApiUpdateCommentMutationBody =
  BodyType<KeyopollsCommentsApiUpdateCommentBody>;
export type KeyopollsCommentsApiUpdateCommentMutationError = ErrorType<Message>;

/**
 * @summary Update Comment
 */
export const useKeyopollsCommentsApiUpdateComment = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof keyopollsCommentsApiUpdateComment>>,
      TError,
      { commentId: number; data: BodyType<KeyopollsCommentsApiUpdateCommentBody> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof keyopollsCommentsApiUpdateComment>>,
  TError,
  { commentId: number; data: BodyType<KeyopollsCommentsApiUpdateCommentBody> },
  TContext
> => {
  const mutationOptions = getKeyopollsCommentsApiUpdateCommentMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Delete a comment using pseudonymous profile
 * @summary Delete Comment
 */
export const keyopollsCommentsApiDeleteComment = (
  commentId: number,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<CommentDeleteSchema>(
    { url: `/api/comments/comments/${commentId}`, method: 'DELETE' },
    options
  );
};

export const getKeyopollsCommentsApiDeleteCommentMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof keyopollsCommentsApiDeleteComment>>,
    TError,
    { commentId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof keyopollsCommentsApiDeleteComment>>,
  TError,
  { commentId: number },
  TContext
> => {
  const mutationKey = ['keyopollsCommentsApiDeleteComment'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof keyopollsCommentsApiDeleteComment>>,
    { commentId: number }
  > = (props) => {
    const { commentId } = props ?? {};

    return keyopollsCommentsApiDeleteComment(commentId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type KeyopollsCommentsApiDeleteCommentMutationResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsCommentsApiDeleteComment>>
>;

export type KeyopollsCommentsApiDeleteCommentMutationError = ErrorType<Message>;

/**
 * @summary Delete Comment
 */
export const useKeyopollsCommentsApiDeleteComment = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof keyopollsCommentsApiDeleteComment>>,
      TError,
      { commentId: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof keyopollsCommentsApiDeleteComment>>,
  TError,
  { commentId: number },
  TContext
> => {
  const mutationOptions = getKeyopollsCommentsApiDeleteCommentMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Get a specific comment with parent context and nested replies
 * @summary Get Comment Thread
 */
export const keyopollsCommentsApiGetCommentThread = (
  commentId: number,
  params?: KeyopollsCommentsApiGetCommentThreadParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<CommentThreadResponse>(
    { url: `/api/comments/comments/${commentId}/thread`, method: 'GET', params, signal },
    options
  );
};

export const getKeyopollsCommentsApiGetCommentThreadQueryKey = (
  commentId: number,
  params?: KeyopollsCommentsApiGetCommentThreadParams
) => {
  return [`/api/comments/comments/${commentId}/thread`, ...(params ? [params] : [])] as const;
};

export const getKeyopollsCommentsApiGetCommentThreadQueryOptions = <
  TData = Awaited<ReturnType<typeof keyopollsCommentsApiGetCommentThread>>,
  TError = ErrorType<Message>,
>(
  commentId: number,
  params?: KeyopollsCommentsApiGetCommentThreadParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommentsApiGetCommentThread>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getKeyopollsCommentsApiGetCommentThreadQueryKey(commentId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof keyopollsCommentsApiGetCommentThread>>
  > = ({ signal }) =>
    keyopollsCommentsApiGetCommentThread(commentId, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!commentId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof keyopollsCommentsApiGetCommentThread>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type KeyopollsCommentsApiGetCommentThreadQueryResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsCommentsApiGetCommentThread>>
>;
export type KeyopollsCommentsApiGetCommentThreadQueryError = ErrorType<Message>;

export function useKeyopollsCommentsApiGetCommentThread<
  TData = Awaited<ReturnType<typeof keyopollsCommentsApiGetCommentThread>>,
  TError = ErrorType<Message>,
>(
  commentId: number,
  params: undefined | KeyopollsCommentsApiGetCommentThreadParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommentsApiGetCommentThread>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsCommentsApiGetCommentThread>>,
          TError,
          Awaited<ReturnType<typeof keyopollsCommentsApiGetCommentThread>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsCommentsApiGetCommentThread<
  TData = Awaited<ReturnType<typeof keyopollsCommentsApiGetCommentThread>>,
  TError = ErrorType<Message>,
>(
  commentId: number,
  params?: KeyopollsCommentsApiGetCommentThreadParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommentsApiGetCommentThread>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsCommentsApiGetCommentThread>>,
          TError,
          Awaited<ReturnType<typeof keyopollsCommentsApiGetCommentThread>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsCommentsApiGetCommentThread<
  TData = Awaited<ReturnType<typeof keyopollsCommentsApiGetCommentThread>>,
  TError = ErrorType<Message>,
>(
  commentId: number,
  params?: KeyopollsCommentsApiGetCommentThreadParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommentsApiGetCommentThread>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Comment Thread
 */

export function useKeyopollsCommentsApiGetCommentThread<
  TData = Awaited<ReturnType<typeof keyopollsCommentsApiGetCommentThread>>,
  TError = ErrorType<Message>,
>(
  commentId: number,
  params?: KeyopollsCommentsApiGetCommentThreadParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommentsApiGetCommentThread>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getKeyopollsCommentsApiGetCommentThreadQueryOptions(
    commentId,
    params,
    options
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
