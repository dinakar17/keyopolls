/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Keyo API
 * API for Keyo Polls app
 * OpenAPI spec version: 1.0.0
 */
import { useMutation } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from '@tanstack/react-query';

import { customInstance } from '.././custom-instance';
import type { BodyType, ErrorType } from '.././custom-instance';
import type {
  CommunityDetails,
  CommunityMembershipResponseSchema,
  CommunityMembershipSchema,
  KeyopollsCommunitiesApiOperationsCreateCommunityBody,
  KeyopollsCommunitiesApiOperationsUpdateCommunityBody,
  Message,
} from '.././schemas';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Create a new community
 * @summary Create Community
 */
export const keyopollsCommunitiesApiOperationsCreateCommunity = (
  keyopollsCommunitiesApiOperationsCreateCommunityBody: BodyType<KeyopollsCommunitiesApiOperationsCreateCommunityBody>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  const formData = new FormData();
  if (keyopollsCommunitiesApiOperationsCreateCommunityBody.avatar !== undefined) {
    formData.append(`avatar`, keyopollsCommunitiesApiOperationsCreateCommunityBody.avatar);
  }
  if (keyopollsCommunitiesApiOperationsCreateCommunityBody.banner !== undefined) {
    formData.append(`banner`, keyopollsCommunitiesApiOperationsCreateCommunityBody.banner);
  }
  formData.append(
    `data`,
    JSON.stringify(keyopollsCommunitiesApiOperationsCreateCommunityBody.data)
  );

  return customInstance<CommunityDetails>(
    {
      url: `/api/communities/operations/communities`,
      method: 'POST',
      headers: { 'Content-Type': 'multipart/form-data' },
      data: formData,
      signal,
    },
    options
  );
};

export const getKeyopollsCommunitiesApiOperationsCreateCommunityMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof keyopollsCommunitiesApiOperationsCreateCommunity>>,
    TError,
    { data: BodyType<KeyopollsCommunitiesApiOperationsCreateCommunityBody> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof keyopollsCommunitiesApiOperationsCreateCommunity>>,
  TError,
  { data: BodyType<KeyopollsCommunitiesApiOperationsCreateCommunityBody> },
  TContext
> => {
  const mutationKey = ['keyopollsCommunitiesApiOperationsCreateCommunity'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof keyopollsCommunitiesApiOperationsCreateCommunity>>,
    { data: BodyType<KeyopollsCommunitiesApiOperationsCreateCommunityBody> }
  > = (props) => {
    const { data } = props ?? {};

    return keyopollsCommunitiesApiOperationsCreateCommunity(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type KeyopollsCommunitiesApiOperationsCreateCommunityMutationResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsCommunitiesApiOperationsCreateCommunity>>
>;
export type KeyopollsCommunitiesApiOperationsCreateCommunityMutationBody =
  BodyType<KeyopollsCommunitiesApiOperationsCreateCommunityBody>;
export type KeyopollsCommunitiesApiOperationsCreateCommunityMutationError = ErrorType<Message>;

/**
 * @summary Create Community
 */
export const useKeyopollsCommunitiesApiOperationsCreateCommunity = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof keyopollsCommunitiesApiOperationsCreateCommunity>>,
      TError,
      { data: BodyType<KeyopollsCommunitiesApiOperationsCreateCommunityBody> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof keyopollsCommunitiesApiOperationsCreateCommunity>>,
  TError,
  { data: BodyType<KeyopollsCommunitiesApiOperationsCreateCommunityBody> },
  TContext
> => {
  const mutationOptions =
    getKeyopollsCommunitiesApiOperationsCreateCommunityMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Update community details
 * @summary Update Community
 */
export const keyopollsCommunitiesApiOperationsUpdateCommunity = (
  communityId: number,
  keyopollsCommunitiesApiOperationsUpdateCommunityBody: BodyType<KeyopollsCommunitiesApiOperationsUpdateCommunityBody>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  const formData = new FormData();
  if (keyopollsCommunitiesApiOperationsUpdateCommunityBody.avatar !== undefined) {
    formData.append(`avatar`, keyopollsCommunitiesApiOperationsUpdateCommunityBody.avatar);
  }
  if (keyopollsCommunitiesApiOperationsUpdateCommunityBody.banner !== undefined) {
    formData.append(`banner`, keyopollsCommunitiesApiOperationsUpdateCommunityBody.banner);
  }
  formData.append(
    `data`,
    JSON.stringify(keyopollsCommunitiesApiOperationsUpdateCommunityBody.data)
  );

  return customInstance<CommunityDetails>(
    {
      url: `/api/communities/operations/communities/${communityId}`,
      method: 'POST',
      headers: { 'Content-Type': 'multipart/form-data' },
      data: formData,
      signal,
    },
    options
  );
};

export const getKeyopollsCommunitiesApiOperationsUpdateCommunityMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof keyopollsCommunitiesApiOperationsUpdateCommunity>>,
    TError,
    { communityId: number; data: BodyType<KeyopollsCommunitiesApiOperationsUpdateCommunityBody> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof keyopollsCommunitiesApiOperationsUpdateCommunity>>,
  TError,
  { communityId: number; data: BodyType<KeyopollsCommunitiesApiOperationsUpdateCommunityBody> },
  TContext
> => {
  const mutationKey = ['keyopollsCommunitiesApiOperationsUpdateCommunity'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof keyopollsCommunitiesApiOperationsUpdateCommunity>>,
    { communityId: number; data: BodyType<KeyopollsCommunitiesApiOperationsUpdateCommunityBody> }
  > = (props) => {
    const { communityId, data } = props ?? {};

    return keyopollsCommunitiesApiOperationsUpdateCommunity(communityId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type KeyopollsCommunitiesApiOperationsUpdateCommunityMutationResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsCommunitiesApiOperationsUpdateCommunity>>
>;
export type KeyopollsCommunitiesApiOperationsUpdateCommunityMutationBody =
  BodyType<KeyopollsCommunitiesApiOperationsUpdateCommunityBody>;
export type KeyopollsCommunitiesApiOperationsUpdateCommunityMutationError = ErrorType<Message>;

/**
 * @summary Update Community
 */
export const useKeyopollsCommunitiesApiOperationsUpdateCommunity = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof keyopollsCommunitiesApiOperationsUpdateCommunity>>,
      TError,
      { communityId: number; data: BodyType<KeyopollsCommunitiesApiOperationsUpdateCommunityBody> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof keyopollsCommunitiesApiOperationsUpdateCommunity>>,
  TError,
  { communityId: number; data: BodyType<KeyopollsCommunitiesApiOperationsUpdateCommunityBody> },
  TContext
> => {
  const mutationOptions =
    getKeyopollsCommunitiesApiOperationsUpdateCommunityMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Join or leave a community
 * @summary Toggle Community Membership
 */
export const keyopollsCommunitiesApiOperationsToggleCommunityMembership = (
  communityId: number,
  communityMembershipSchema: BodyType<CommunityMembershipSchema>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<CommunityMembershipResponseSchema>(
    {
      url: `/api/communities/operations/communities/${communityId}/membership`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: communityMembershipSchema,
      signal,
    },
    options
  );
};

export const getKeyopollsCommunitiesApiOperationsToggleCommunityMembershipMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof keyopollsCommunitiesApiOperationsToggleCommunityMembership>>,
    TError,
    { communityId: number; data: BodyType<CommunityMembershipSchema> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof keyopollsCommunitiesApiOperationsToggleCommunityMembership>>,
  TError,
  { communityId: number; data: BodyType<CommunityMembershipSchema> },
  TContext
> => {
  const mutationKey = ['keyopollsCommunitiesApiOperationsToggleCommunityMembership'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof keyopollsCommunitiesApiOperationsToggleCommunityMembership>>,
    { communityId: number; data: BodyType<CommunityMembershipSchema> }
  > = (props) => {
    const { communityId, data } = props ?? {};

    return keyopollsCommunitiesApiOperationsToggleCommunityMembership(
      communityId,
      data,
      requestOptions
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type KeyopollsCommunitiesApiOperationsToggleCommunityMembershipMutationResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsCommunitiesApiOperationsToggleCommunityMembership>>
>;
export type KeyopollsCommunitiesApiOperationsToggleCommunityMembershipMutationBody =
  BodyType<CommunityMembershipSchema>;
export type KeyopollsCommunitiesApiOperationsToggleCommunityMembershipMutationError =
  ErrorType<Message>;

/**
 * @summary Toggle Community Membership
 */
export const useKeyopollsCommunitiesApiOperationsToggleCommunityMembership = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof keyopollsCommunitiesApiOperationsToggleCommunityMembership>>,
      TError,
      { communityId: number; data: BodyType<CommunityMembershipSchema> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof keyopollsCommunitiesApiOperationsToggleCommunityMembership>>,
  TError,
  { communityId: number; data: BodyType<CommunityMembershipSchema> },
  TContext
> => {
  const mutationOptions =
    getKeyopollsCommunitiesApiOperationsToggleCommunityMembershipMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
