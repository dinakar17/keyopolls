/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Keyo API
 * API for Keyo Polls app
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { customInstance } from '.././custom-instance';
import type { ErrorType } from '.././custom-instance';
import type {
  KeyopollsCommentsApiSearchSearchCommentsParams,
  Message,
  PaginatedCommentSearchResponse,
} from '.././schemas';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Search comments across the platform or fetch comments by profile

Args:
    q: Search query string (optional)
    search_type: Type of search (all, content, author, media, links)
    content_type: Optional filter by content type (poll, etc.)
    object_id: Optional filter by specific content object
    profile_id: Optional filter by profile ID (PseudonymousProfile ID)
    include_poll_content: Whether to include poll content in response
    page: Page number
    page_size: Results per page (max 100)
    sort: Sort order for results
 * @summary Search Comments
 */
export const keyopollsCommentsApiSearchSearchComments = (
  params?: KeyopollsCommentsApiSearchSearchCommentsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<PaginatedCommentSearchResponse>(
    { url: `/api/comments/search/comments/search`, method: 'GET', params, signal },
    options
  );
};

export const getKeyopollsCommentsApiSearchSearchCommentsQueryKey = (
  params?: KeyopollsCommentsApiSearchSearchCommentsParams
) => {
  return [`/api/comments/search/comments/search`, ...(params ? [params] : [])] as const;
};

export const getKeyopollsCommentsApiSearchSearchCommentsQueryOptions = <
  TData = Awaited<ReturnType<typeof keyopollsCommentsApiSearchSearchComments>>,
  TError = ErrorType<Message>,
>(
  params?: KeyopollsCommentsApiSearchSearchCommentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommentsApiSearchSearchComments>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getKeyopollsCommentsApiSearchSearchCommentsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof keyopollsCommentsApiSearchSearchComments>>
  > = ({ signal }) => keyopollsCommentsApiSearchSearchComments(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof keyopollsCommentsApiSearchSearchComments>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type KeyopollsCommentsApiSearchSearchCommentsQueryResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsCommentsApiSearchSearchComments>>
>;
export type KeyopollsCommentsApiSearchSearchCommentsQueryError = ErrorType<Message>;

export function useKeyopollsCommentsApiSearchSearchComments<
  TData = Awaited<ReturnType<typeof keyopollsCommentsApiSearchSearchComments>>,
  TError = ErrorType<Message>,
>(
  params: undefined | KeyopollsCommentsApiSearchSearchCommentsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommentsApiSearchSearchComments>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsCommentsApiSearchSearchComments>>,
          TError,
          Awaited<ReturnType<typeof keyopollsCommentsApiSearchSearchComments>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsCommentsApiSearchSearchComments<
  TData = Awaited<ReturnType<typeof keyopollsCommentsApiSearchSearchComments>>,
  TError = ErrorType<Message>,
>(
  params?: KeyopollsCommentsApiSearchSearchCommentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommentsApiSearchSearchComments>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsCommentsApiSearchSearchComments>>,
          TError,
          Awaited<ReturnType<typeof keyopollsCommentsApiSearchSearchComments>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsCommentsApiSearchSearchComments<
  TData = Awaited<ReturnType<typeof keyopollsCommentsApiSearchSearchComments>>,
  TError = ErrorType<Message>,
>(
  params?: KeyopollsCommentsApiSearchSearchCommentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommentsApiSearchSearchComments>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Search Comments
 */

export function useKeyopollsCommentsApiSearchSearchComments<
  TData = Awaited<ReturnType<typeof keyopollsCommentsApiSearchSearchComments>>,
  TError = ErrorType<Message>,
>(
  params?: KeyopollsCommentsApiSearchSearchCommentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommentsApiSearchSearchComments>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getKeyopollsCommentsApiSearchSearchCommentsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
