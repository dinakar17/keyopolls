/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Keyo API
 * API for Keyo Polls app
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { customInstance } from '.././custom-instance';
import type { BodyType, ErrorType } from '.././custom-instance';
import type {
  ChatUsersResponseSchema,
  CreateChatRequestSchema,
  CreateChatResponseSchema,
  KeyopollsChatsApiGetChatUsersParams,
  Message,
} from '.././schemas';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Get a list of users the user can chat with in a community.

For unauthenticated users: Shows only moderators (no chat data).
For authenticated users: Shows moderators they can chat with + chat data.
For moderators: Shows their existing chats + other moderators.

Only displays users with "moderator" role.

Returns users ordered by:
1. Users they've chatted with (with latest message first) - authenticated only
2. Remaining moderators (alphabetically)
 * @summary Get Chat Users
 */
export const keyopollsChatsApiGetChatUsers = (
  params: KeyopollsChatsApiGetChatUsersParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<ChatUsersResponseSchema>(
    { url: `/api/chats/chat-users`, method: 'GET', params, signal },
    options
  );
};

export const getKeyopollsChatsApiGetChatUsersQueryKey = (
  params: KeyopollsChatsApiGetChatUsersParams
) => {
  return [`/api/chats/chat-users`, ...(params ? [params] : [])] as const;
};

export const getKeyopollsChatsApiGetChatUsersQueryOptions = <
  TData = Awaited<ReturnType<typeof keyopollsChatsApiGetChatUsers>>,
  TError = ErrorType<Message>,
>(
  params: KeyopollsChatsApiGetChatUsersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof keyopollsChatsApiGetChatUsers>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getKeyopollsChatsApiGetChatUsersQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof keyopollsChatsApiGetChatUsers>>> = ({
    signal,
  }) => keyopollsChatsApiGetChatUsers(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof keyopollsChatsApiGetChatUsers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type KeyopollsChatsApiGetChatUsersQueryResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsChatsApiGetChatUsers>>
>;
export type KeyopollsChatsApiGetChatUsersQueryError = ErrorType<Message>;

export function useKeyopollsChatsApiGetChatUsers<
  TData = Awaited<ReturnType<typeof keyopollsChatsApiGetChatUsers>>,
  TError = ErrorType<Message>,
>(
  params: KeyopollsChatsApiGetChatUsersParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof keyopollsChatsApiGetChatUsers>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsChatsApiGetChatUsers>>,
          TError,
          Awaited<ReturnType<typeof keyopollsChatsApiGetChatUsers>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsChatsApiGetChatUsers<
  TData = Awaited<ReturnType<typeof keyopollsChatsApiGetChatUsers>>,
  TError = ErrorType<Message>,
>(
  params: KeyopollsChatsApiGetChatUsersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof keyopollsChatsApiGetChatUsers>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsChatsApiGetChatUsers>>,
          TError,
          Awaited<ReturnType<typeof keyopollsChatsApiGetChatUsers>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsChatsApiGetChatUsers<
  TData = Awaited<ReturnType<typeof keyopollsChatsApiGetChatUsers>>,
  TError = ErrorType<Message>,
>(
  params: KeyopollsChatsApiGetChatUsersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof keyopollsChatsApiGetChatUsers>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Chat Users
 */

export function useKeyopollsChatsApiGetChatUsers<
  TData = Awaited<ReturnType<typeof keyopollsChatsApiGetChatUsers>>,
  TError = ErrorType<Message>,
>(
  params: KeyopollsChatsApiGetChatUsersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof keyopollsChatsApiGetChatUsers>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getKeyopollsChatsApiGetChatUsersQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get existing chat or create new one between authenticated user and mentor.

This is a convenience endpoint that always returns a chat (creates if doesn't
exist).
 * @summary Get Or Create Chat Endpoint
 */
export const keyopollsChatsApiGetOrCreateChatEndpoint = (
  createChatRequestSchema: BodyType<CreateChatRequestSchema>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<CreateChatResponseSchema>(
    {
      url: `/api/chats/get-or-create-chat`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createChatRequestSchema,
      signal,
    },
    options
  );
};

export const getKeyopollsChatsApiGetOrCreateChatEndpointMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof keyopollsChatsApiGetOrCreateChatEndpoint>>,
    TError,
    { data: BodyType<CreateChatRequestSchema> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof keyopollsChatsApiGetOrCreateChatEndpoint>>,
  TError,
  { data: BodyType<CreateChatRequestSchema> },
  TContext
> => {
  const mutationKey = ['keyopollsChatsApiGetOrCreateChatEndpoint'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof keyopollsChatsApiGetOrCreateChatEndpoint>>,
    { data: BodyType<CreateChatRequestSchema> }
  > = (props) => {
    const { data } = props ?? {};

    return keyopollsChatsApiGetOrCreateChatEndpoint(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type KeyopollsChatsApiGetOrCreateChatEndpointMutationResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsChatsApiGetOrCreateChatEndpoint>>
>;
export type KeyopollsChatsApiGetOrCreateChatEndpointMutationBody =
  BodyType<CreateChatRequestSchema>;
export type KeyopollsChatsApiGetOrCreateChatEndpointMutationError = ErrorType<Message>;

/**
 * @summary Get Or Create Chat Endpoint
 */
export const useKeyopollsChatsApiGetOrCreateChatEndpoint = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof keyopollsChatsApiGetOrCreateChatEndpoint>>,
      TError,
      { data: BodyType<CreateChatRequestSchema> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof keyopollsChatsApiGetOrCreateChatEndpoint>>,
  TError,
  { data: BodyType<CreateChatRequestSchema> },
  TContext
> => {
  const mutationOptions = getKeyopollsChatsApiGetOrCreateChatEndpointMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
