/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Keyo API
 * API for Keyo Polls app
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { customInstance } from '.././custom-instance';
import type { BodyType, ErrorType } from '.././custom-instance';
import type {
  KeyopollsChatsApiMessagesCreateTimelineItemBody,
  KeyopollsChatsApiMessagesGetTimelineItemsParams,
  MentorDetails,
  Message,
  TimelineItemResponseSchema,
  TimelineResponseSchema,
  UpdateTimelineItemSchema,
} from '.././schemas';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Get Mentor Details
 */
export const keyopollsChatsApiMessagesGetMentorDetails = (
  chatId: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<MentorDetails>(
    { url: `/api/messages/mentor/${chatId}`, method: 'GET', signal },
    options
  );
};

export const getKeyopollsChatsApiMessagesGetMentorDetailsQueryKey = (chatId: string) => {
  return [`/api/messages/mentor/${chatId}`] as const;
};

export const getKeyopollsChatsApiMessagesGetMentorDetailsQueryOptions = <
  TData = Awaited<ReturnType<typeof keyopollsChatsApiMessagesGetMentorDetails>>,
  TError = ErrorType<Message>,
>(
  chatId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsChatsApiMessagesGetMentorDetails>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getKeyopollsChatsApiMessagesGetMentorDetailsQueryKey(chatId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof keyopollsChatsApiMessagesGetMentorDetails>>
  > = ({ signal }) => keyopollsChatsApiMessagesGetMentorDetails(chatId, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!chatId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof keyopollsChatsApiMessagesGetMentorDetails>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type KeyopollsChatsApiMessagesGetMentorDetailsQueryResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsChatsApiMessagesGetMentorDetails>>
>;
export type KeyopollsChatsApiMessagesGetMentorDetailsQueryError = ErrorType<Message>;

export function useKeyopollsChatsApiMessagesGetMentorDetails<
  TData = Awaited<ReturnType<typeof keyopollsChatsApiMessagesGetMentorDetails>>,
  TError = ErrorType<Message>,
>(
  chatId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsChatsApiMessagesGetMentorDetails>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsChatsApiMessagesGetMentorDetails>>,
          TError,
          Awaited<ReturnType<typeof keyopollsChatsApiMessagesGetMentorDetails>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsChatsApiMessagesGetMentorDetails<
  TData = Awaited<ReturnType<typeof keyopollsChatsApiMessagesGetMentorDetails>>,
  TError = ErrorType<Message>,
>(
  chatId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsChatsApiMessagesGetMentorDetails>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsChatsApiMessagesGetMentorDetails>>,
          TError,
          Awaited<ReturnType<typeof keyopollsChatsApiMessagesGetMentorDetails>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsChatsApiMessagesGetMentorDetails<
  TData = Awaited<ReturnType<typeof keyopollsChatsApiMessagesGetMentorDetails>>,
  TError = ErrorType<Message>,
>(
  chatId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsChatsApiMessagesGetMentorDetails>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Mentor Details
 */

export function useKeyopollsChatsApiMessagesGetMentorDetails<
  TData = Awaited<ReturnType<typeof keyopollsChatsApiMessagesGetMentorDetails>>,
  TError = ErrorType<Message>,
>(
  chatId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsChatsApiMessagesGetMentorDetails>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getKeyopollsChatsApiMessagesGetMentorDetailsQueryOptions(chatId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get timeline items (messages) including both chat messages and broadcast messages.

For chat messages: Requires chat_id, shows messages between two users
For broadcast messages: Requires community_id, shows creator broadcasts
mixed with chat messages

Features:
- Pagination support
- Filter by item type, sender, etc.
- Includes mentor details for each message
- Mixed timeline of chat + broadcast messages ordered by time
- Multiple attachments support per message
- Consistent service data using ServiceItemSchema

Query Parameters:
- chat_id: Get messages for specific chat
- community_id: Get messages for community (includes broadcasts)
- sender_id: Filter by message sender
- item_type: Filter by message type
- include_broadcasts: Include broadcast messages (default: True)
- page: Page number (default: 1)
- per_page: Items per page (default: 20, max: 100)
 * @summary Get Timeline Items
 */
export const keyopollsChatsApiMessagesGetTimelineItems = (
  params?: KeyopollsChatsApiMessagesGetTimelineItemsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<TimelineResponseSchema>(
    { url: `/api/messages/timeline`, method: 'GET', params, signal },
    options
  );
};

export const getKeyopollsChatsApiMessagesGetTimelineItemsQueryKey = (
  params?: KeyopollsChatsApiMessagesGetTimelineItemsParams
) => {
  return [`/api/messages/timeline`, ...(params ? [params] : [])] as const;
};

export const getKeyopollsChatsApiMessagesGetTimelineItemsQueryOptions = <
  TData = Awaited<ReturnType<typeof keyopollsChatsApiMessagesGetTimelineItems>>,
  TError = ErrorType<Message>,
>(
  params?: KeyopollsChatsApiMessagesGetTimelineItemsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsChatsApiMessagesGetTimelineItems>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getKeyopollsChatsApiMessagesGetTimelineItemsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof keyopollsChatsApiMessagesGetTimelineItems>>
  > = ({ signal }) => keyopollsChatsApiMessagesGetTimelineItems(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof keyopollsChatsApiMessagesGetTimelineItems>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type KeyopollsChatsApiMessagesGetTimelineItemsQueryResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsChatsApiMessagesGetTimelineItems>>
>;
export type KeyopollsChatsApiMessagesGetTimelineItemsQueryError = ErrorType<Message>;

export function useKeyopollsChatsApiMessagesGetTimelineItems<
  TData = Awaited<ReturnType<typeof keyopollsChatsApiMessagesGetTimelineItems>>,
  TError = ErrorType<Message>,
>(
  params: undefined | KeyopollsChatsApiMessagesGetTimelineItemsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsChatsApiMessagesGetTimelineItems>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsChatsApiMessagesGetTimelineItems>>,
          TError,
          Awaited<ReturnType<typeof keyopollsChatsApiMessagesGetTimelineItems>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsChatsApiMessagesGetTimelineItems<
  TData = Awaited<ReturnType<typeof keyopollsChatsApiMessagesGetTimelineItems>>,
  TError = ErrorType<Message>,
>(
  params?: KeyopollsChatsApiMessagesGetTimelineItemsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsChatsApiMessagesGetTimelineItems>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsChatsApiMessagesGetTimelineItems>>,
          TError,
          Awaited<ReturnType<typeof keyopollsChatsApiMessagesGetTimelineItems>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsChatsApiMessagesGetTimelineItems<
  TData = Awaited<ReturnType<typeof keyopollsChatsApiMessagesGetTimelineItems>>,
  TError = ErrorType<Message>,
>(
  params?: KeyopollsChatsApiMessagesGetTimelineItemsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsChatsApiMessagesGetTimelineItems>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Timeline Items
 */

export function useKeyopollsChatsApiMessagesGetTimelineItems<
  TData = Awaited<ReturnType<typeof keyopollsChatsApiMessagesGetTimelineItems>>,
  TError = ErrorType<Message>,
>(
  params?: KeyopollsChatsApiMessagesGetTimelineItemsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsChatsApiMessagesGetTimelineItems>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getKeyopollsChatsApiMessagesGetTimelineItemsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create a new timeline item (message).

For chat messages: Provide chat_id
For broadcast messages: Provide community_id (moderators only)

Required fields:
- item_type: Type of message (text, image, video, document, audio,
  voice_call, video_call, service)

Optional fields:
- chat_id: For chat messages
- community_id: For broadcast messages
- community_slug: For community messages
- content: Text content
- service_item_id: For service-related messages
- attachments: File attachments (multiple files supported)
- call_duration: For call messages
- call_status: For call messages
 * @summary Create Timeline Item
 */
export const keyopollsChatsApiMessagesCreateTimelineItem = (
  keyopollsChatsApiMessagesCreateTimelineItemBody: BodyType<KeyopollsChatsApiMessagesCreateTimelineItemBody>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  const formData = new FormData();
  if (keyopollsChatsApiMessagesCreateTimelineItemBody.attachments !== undefined) {
    keyopollsChatsApiMessagesCreateTimelineItemBody.attachments.forEach((value) =>
      formData.append(`attachments`, value)
    );
  }
  formData.append(`data`, JSON.stringify(keyopollsChatsApiMessagesCreateTimelineItemBody.data));

  return customInstance<TimelineItemResponseSchema>(
    {
      url: `/api/messages/timeline`,
      method: 'POST',
      headers: { 'Content-Type': 'multipart/form-data' },
      data: formData,
      signal,
    },
    options
  );
};

export const getKeyopollsChatsApiMessagesCreateTimelineItemMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof keyopollsChatsApiMessagesCreateTimelineItem>>,
    TError,
    { data: BodyType<KeyopollsChatsApiMessagesCreateTimelineItemBody> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof keyopollsChatsApiMessagesCreateTimelineItem>>,
  TError,
  { data: BodyType<KeyopollsChatsApiMessagesCreateTimelineItemBody> },
  TContext
> => {
  const mutationKey = ['keyopollsChatsApiMessagesCreateTimelineItem'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof keyopollsChatsApiMessagesCreateTimelineItem>>,
    { data: BodyType<KeyopollsChatsApiMessagesCreateTimelineItemBody> }
  > = (props) => {
    const { data } = props ?? {};

    return keyopollsChatsApiMessagesCreateTimelineItem(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type KeyopollsChatsApiMessagesCreateTimelineItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsChatsApiMessagesCreateTimelineItem>>
>;
export type KeyopollsChatsApiMessagesCreateTimelineItemMutationBody =
  BodyType<KeyopollsChatsApiMessagesCreateTimelineItemBody>;
export type KeyopollsChatsApiMessagesCreateTimelineItemMutationError = ErrorType<Message>;

/**
 * @summary Create Timeline Item
 */
export const useKeyopollsChatsApiMessagesCreateTimelineItem = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof keyopollsChatsApiMessagesCreateTimelineItem>>,
      TError,
      { data: BodyType<KeyopollsChatsApiMessagesCreateTimelineItemBody> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof keyopollsChatsApiMessagesCreateTimelineItem>>,
  TError,
  { data: BodyType<KeyopollsChatsApiMessagesCreateTimelineItemBody> },
  TContext
> => {
  const mutationOptions = getKeyopollsChatsApiMessagesCreateTimelineItemMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Update an existing timeline item.
Only the sender can update their own messages.

Updatable fields:
- content: Message content (for text messages)
- is_read: Read status
- call_duration: For call messages
- call_status: For call messages
 * @summary Update Timeline Item
 */
export const keyopollsChatsApiMessagesUpdateTimelineItem = (
  itemId: string,
  updateTimelineItemSchema: BodyType<UpdateTimelineItemSchema>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<TimelineItemResponseSchema>(
    {
      url: `/api/messages/timeline/${itemId}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: updateTimelineItemSchema,
    },
    options
  );
};

export const getKeyopollsChatsApiMessagesUpdateTimelineItemMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof keyopollsChatsApiMessagesUpdateTimelineItem>>,
    TError,
    { itemId: string; data: BodyType<UpdateTimelineItemSchema> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof keyopollsChatsApiMessagesUpdateTimelineItem>>,
  TError,
  { itemId: string; data: BodyType<UpdateTimelineItemSchema> },
  TContext
> => {
  const mutationKey = ['keyopollsChatsApiMessagesUpdateTimelineItem'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof keyopollsChatsApiMessagesUpdateTimelineItem>>,
    { itemId: string; data: BodyType<UpdateTimelineItemSchema> }
  > = (props) => {
    const { itemId, data } = props ?? {};

    return keyopollsChatsApiMessagesUpdateTimelineItem(itemId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type KeyopollsChatsApiMessagesUpdateTimelineItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsChatsApiMessagesUpdateTimelineItem>>
>;
export type KeyopollsChatsApiMessagesUpdateTimelineItemMutationBody =
  BodyType<UpdateTimelineItemSchema>;
export type KeyopollsChatsApiMessagesUpdateTimelineItemMutationError = ErrorType<Message>;

/**
 * @summary Update Timeline Item
 */
export const useKeyopollsChatsApiMessagesUpdateTimelineItem = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof keyopollsChatsApiMessagesUpdateTimelineItem>>,
      TError,
      { itemId: string; data: BodyType<UpdateTimelineItemSchema> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof keyopollsChatsApiMessagesUpdateTimelineItem>>,
  TError,
  { itemId: string; data: BodyType<UpdateTimelineItemSchema> },
  TContext
> => {
  const mutationOptions = getKeyopollsChatsApiMessagesUpdateTimelineItemMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Delete a timeline item.
Only the sender can delete their own messages.
 * @summary Delete Timeline Item
 */
export const keyopollsChatsApiMessagesDeleteTimelineItem = (
  itemId: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Message>(
    { url: `/api/messages/timeline/${itemId}`, method: 'DELETE' },
    options
  );
};

export const getKeyopollsChatsApiMessagesDeleteTimelineItemMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof keyopollsChatsApiMessagesDeleteTimelineItem>>,
    TError,
    { itemId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof keyopollsChatsApiMessagesDeleteTimelineItem>>,
  TError,
  { itemId: string },
  TContext
> => {
  const mutationKey = ['keyopollsChatsApiMessagesDeleteTimelineItem'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof keyopollsChatsApiMessagesDeleteTimelineItem>>,
    { itemId: string }
  > = (props) => {
    const { itemId } = props ?? {};

    return keyopollsChatsApiMessagesDeleteTimelineItem(itemId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type KeyopollsChatsApiMessagesDeleteTimelineItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsChatsApiMessagesDeleteTimelineItem>>
>;

export type KeyopollsChatsApiMessagesDeleteTimelineItemMutationError = ErrorType<Message>;

/**
 * @summary Delete Timeline Item
 */
export const useKeyopollsChatsApiMessagesDeleteTimelineItem = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof keyopollsChatsApiMessagesDeleteTimelineItem>>,
      TError,
      { itemId: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof keyopollsChatsApiMessagesDeleteTimelineItem>>,
  TError,
  { itemId: string },
  TContext
> => {
  const mutationOptions = getKeyopollsChatsApiMessagesDeleteTimelineItemMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
