/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Keyo API
 * API for Keyo Polls app
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { customInstance } from '.././custom-instance';
import type { BodyType, ErrorType } from '.././custom-instance';
import type {
  BookmarkedTodoItemSchema,
  KeyopollsCommonApiTodoListTodosParams,
  Message,
  TodoListResponseSchema,
  UpdateTodoSchema,
} from '.././schemas';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Get todos from a specific todo folder by slug

Features:
- Pagination with customizable page size
- Filter by completion status and overdue status
- Search in todo text
- Multiple ordering options
- Access control for public/paid folders
 * @summary List Todos
 */
export const keyopollsCommonApiTodoListTodos = (
  slug: string,
  params?: KeyopollsCommonApiTodoListTodosParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<TodoListResponseSchema>(
    { url: `/api/common/todos/todos/${slug}`, method: 'GET', params, signal },
    options
  );
};

export const getKeyopollsCommonApiTodoListTodosQueryKey = (
  slug: string,
  params?: KeyopollsCommonApiTodoListTodosParams
) => {
  return [`/api/common/todos/todos/${slug}`, ...(params ? [params] : [])] as const;
};

export const getKeyopollsCommonApiTodoListTodosQueryOptions = <
  TData = Awaited<ReturnType<typeof keyopollsCommonApiTodoListTodos>>,
  TError = ErrorType<Message>,
>(
  slug: string,
  params?: KeyopollsCommonApiTodoListTodosParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof keyopollsCommonApiTodoListTodos>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getKeyopollsCommonApiTodoListTodosQueryKey(slug, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof keyopollsCommonApiTodoListTodos>>> = ({
    signal,
  }) => keyopollsCommonApiTodoListTodos(slug, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!slug, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof keyopollsCommonApiTodoListTodos>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type KeyopollsCommonApiTodoListTodosQueryResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsCommonApiTodoListTodos>>
>;
export type KeyopollsCommonApiTodoListTodosQueryError = ErrorType<Message>;

export function useKeyopollsCommonApiTodoListTodos<
  TData = Awaited<ReturnType<typeof keyopollsCommonApiTodoListTodos>>,
  TError = ErrorType<Message>,
>(
  slug: string,
  params: undefined | KeyopollsCommonApiTodoListTodosParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof keyopollsCommonApiTodoListTodos>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsCommonApiTodoListTodos>>,
          TError,
          Awaited<ReturnType<typeof keyopollsCommonApiTodoListTodos>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsCommonApiTodoListTodos<
  TData = Awaited<ReturnType<typeof keyopollsCommonApiTodoListTodos>>,
  TError = ErrorType<Message>,
>(
  slug: string,
  params?: KeyopollsCommonApiTodoListTodosParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof keyopollsCommonApiTodoListTodos>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsCommonApiTodoListTodos>>,
          TError,
          Awaited<ReturnType<typeof keyopollsCommonApiTodoListTodos>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsCommonApiTodoListTodos<
  TData = Awaited<ReturnType<typeof keyopollsCommonApiTodoListTodos>>,
  TError = ErrorType<Message>,
>(
  slug: string,
  params?: KeyopollsCommonApiTodoListTodosParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof keyopollsCommonApiTodoListTodos>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary List Todos
 */

export function useKeyopollsCommonApiTodoListTodos<
  TData = Awaited<ReturnType<typeof keyopollsCommonApiTodoListTodos>>,
  TError = ErrorType<Message>,
>(
  slug: string,
  params?: KeyopollsCommonApiTodoListTodosParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof keyopollsCommonApiTodoListTodos>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getKeyopollsCommonApiTodoListTodosQueryOptions(slug, params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Update a specific todo item's completion status and due date
Only the folder owner can update todos
 * @summary Update Todo Item
 */
export const keyopollsCommonApiTodoUpdateTodoItem = (
  slug: string,
  todoId: number,
  updateTodoSchema: BodyType<UpdateTodoSchema>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<BookmarkedTodoItemSchema>(
    {
      url: `/api/common/todos/todos/${slug}/items/${todoId}`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: updateTodoSchema,
    },
    options
  );
};

export const getKeyopollsCommonApiTodoUpdateTodoItemMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof keyopollsCommonApiTodoUpdateTodoItem>>,
    TError,
    { slug: string; todoId: number; data: BodyType<UpdateTodoSchema> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof keyopollsCommonApiTodoUpdateTodoItem>>,
  TError,
  { slug: string; todoId: number; data: BodyType<UpdateTodoSchema> },
  TContext
> => {
  const mutationKey = ['keyopollsCommonApiTodoUpdateTodoItem'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof keyopollsCommonApiTodoUpdateTodoItem>>,
    { slug: string; todoId: number; data: BodyType<UpdateTodoSchema> }
  > = (props) => {
    const { slug, todoId, data } = props ?? {};

    return keyopollsCommonApiTodoUpdateTodoItem(slug, todoId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type KeyopollsCommonApiTodoUpdateTodoItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsCommonApiTodoUpdateTodoItem>>
>;
export type KeyopollsCommonApiTodoUpdateTodoItemMutationBody = BodyType<UpdateTodoSchema>;
export type KeyopollsCommonApiTodoUpdateTodoItemMutationError = ErrorType<Message>;

/**
 * @summary Update Todo Item
 */
export const useKeyopollsCommonApiTodoUpdateTodoItem = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof keyopollsCommonApiTodoUpdateTodoItem>>,
      TError,
      { slug: string; todoId: number; data: BodyType<UpdateTodoSchema> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof keyopollsCommonApiTodoUpdateTodoItem>>,
  TError,
  { slug: string; todoId: number; data: BodyType<UpdateTodoSchema> },
  TContext
> => {
  const mutationOptions = getKeyopollsCommonApiTodoUpdateTodoItemMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
