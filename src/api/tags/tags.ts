/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Keyo API
 * API for Keyo Polls app
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { customInstance } from '.././custom-instance';
import type { ErrorType } from '.././custom-instance';
import type {
  KeyopollsCommonApiTagsGetTagsListParams,
  Message,
  TagsListResponseSchema,
} from '.././schemas';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Get a paginated list of tags with optional search functionality.

Features:
- Search by tag name or description
- Filter by community ID to get tags used in specific community
- Pagination with configurable page size
- Multiple sorting options
- Returns usage count for each tag

Query Parameters:
- search: Search term for tag name or description
- community_id: Filter tags used in a specific community
- page: Page number (default: 1)
- per_page: Items per page (default: 20, max: 100)
- order_by: Sort field (created_at, name, usage_count with - for desc)
 * @summary Get Tags List
 */
export const keyopollsCommonApiTagsGetTagsList = (
  params?: KeyopollsCommonApiTagsGetTagsListParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<TagsListResponseSchema>(
    { url: `/api/common/tags/tags`, method: 'GET', params, signal },
    options
  );
};

export const getKeyopollsCommonApiTagsGetTagsListQueryKey = (
  params?: KeyopollsCommonApiTagsGetTagsListParams
) => {
  return [`/api/common/tags/tags`, ...(params ? [params] : [])] as const;
};

export const getKeyopollsCommonApiTagsGetTagsListQueryOptions = <
  TData = Awaited<ReturnType<typeof keyopollsCommonApiTagsGetTagsList>>,
  TError = ErrorType<Message>,
>(
  params?: KeyopollsCommonApiTagsGetTagsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof keyopollsCommonApiTagsGetTagsList>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getKeyopollsCommonApiTagsGetTagsListQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof keyopollsCommonApiTagsGetTagsList>>> = ({
    signal,
  }) => keyopollsCommonApiTagsGetTagsList(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof keyopollsCommonApiTagsGetTagsList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type KeyopollsCommonApiTagsGetTagsListQueryResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsCommonApiTagsGetTagsList>>
>;
export type KeyopollsCommonApiTagsGetTagsListQueryError = ErrorType<Message>;

export function useKeyopollsCommonApiTagsGetTagsList<
  TData = Awaited<ReturnType<typeof keyopollsCommonApiTagsGetTagsList>>,
  TError = ErrorType<Message>,
>(
  params: undefined | KeyopollsCommonApiTagsGetTagsListParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof keyopollsCommonApiTagsGetTagsList>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsCommonApiTagsGetTagsList>>,
          TError,
          Awaited<ReturnType<typeof keyopollsCommonApiTagsGetTagsList>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsCommonApiTagsGetTagsList<
  TData = Awaited<ReturnType<typeof keyopollsCommonApiTagsGetTagsList>>,
  TError = ErrorType<Message>,
>(
  params?: KeyopollsCommonApiTagsGetTagsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof keyopollsCommonApiTagsGetTagsList>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsCommonApiTagsGetTagsList>>,
          TError,
          Awaited<ReturnType<typeof keyopollsCommonApiTagsGetTagsList>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsCommonApiTagsGetTagsList<
  TData = Awaited<ReturnType<typeof keyopollsCommonApiTagsGetTagsList>>,
  TError = ErrorType<Message>,
>(
  params?: KeyopollsCommonApiTagsGetTagsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof keyopollsCommonApiTagsGetTagsList>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Tags List
 */

export function useKeyopollsCommonApiTagsGetTagsList<
  TData = Awaited<ReturnType<typeof keyopollsCommonApiTagsGetTagsList>>,
  TError = ErrorType<Message>,
>(
  params?: KeyopollsCommonApiTagsGetTagsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof keyopollsCommonApiTagsGetTagsList>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getKeyopollsCommonApiTagsGetTagsListQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
