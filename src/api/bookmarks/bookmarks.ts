/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Keyo API
 * API for Keyo Polls app
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { customInstance } from '.././custom-instance';
import type { BodyType, ErrorType } from '.././custom-instance';
import type {
  BookmarkFolderCreateSchema,
  BookmarkFolderDetailsSchema,
  BookmarkFoldersListResponseSchema,
  KeyopollsCommonApiBookmarkGetBookmarkFoldersParams,
  Message,
  TodoBookmarkStatusListResponseSchema,
  TodoBookmarkStatusSchema,
  ToggleBookmarkResponseSchema,
  ToggleBookmarkSchema,
  UpdateBookmarkFolderSchema,
} from '.././schemas';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Toggle bookmark status for content using pseudonymous profile.

All bookmarks are created and managed through the user's pseudonymous profile.
This provides consistent bookmark management and better organization.

Note: Paid bookmark folders can only contain Poll objects created by
the folder author.
 * @summary Toggle Bookmark
 */
export const keyopollsCommonApiBookmarkToggleBookmark = (
  contentType: 'Poll' | 'GenericComment' | 'Article' | 'PollTodo',
  objectId: number,
  toggleBookmarkSchema: BodyType<ToggleBookmarkSchema>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<ToggleBookmarkResponseSchema>(
    {
      url: `/api/common/bookmarks/${contentType}/${objectId}/bookmark`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: toggleBookmarkSchema,
      signal,
    },
    options
  );
};

export const getKeyopollsCommonApiBookmarkToggleBookmarkMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof keyopollsCommonApiBookmarkToggleBookmark>>,
    TError,
    {
      contentType: 'Poll' | 'GenericComment' | 'Article' | 'PollTodo';
      objectId: number;
      data: BodyType<ToggleBookmarkSchema>;
    },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof keyopollsCommonApiBookmarkToggleBookmark>>,
  TError,
  {
    contentType: 'Poll' | 'GenericComment' | 'Article' | 'PollTodo';
    objectId: number;
    data: BodyType<ToggleBookmarkSchema>;
  },
  TContext
> => {
  const mutationKey = ['keyopollsCommonApiBookmarkToggleBookmark'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof keyopollsCommonApiBookmarkToggleBookmark>>,
    {
      contentType: 'Poll' | 'GenericComment' | 'Article' | 'PollTodo';
      objectId: number;
      data: BodyType<ToggleBookmarkSchema>;
    }
  > = (props) => {
    const { contentType, objectId, data } = props ?? {};

    return keyopollsCommonApiBookmarkToggleBookmark(contentType, objectId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type KeyopollsCommonApiBookmarkToggleBookmarkMutationResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsCommonApiBookmarkToggleBookmark>>
>;
export type KeyopollsCommonApiBookmarkToggleBookmarkMutationBody = BodyType<ToggleBookmarkSchema>;
export type KeyopollsCommonApiBookmarkToggleBookmarkMutationError = ErrorType<Message>;

/**
 * @summary Toggle Bookmark
 */
export const useKeyopollsCommonApiBookmarkToggleBookmark = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof keyopollsCommonApiBookmarkToggleBookmark>>,
      TError,
      {
        contentType: 'Poll' | 'GenericComment' | 'Article' | 'PollTodo';
        objectId: number;
        data: BodyType<ToggleBookmarkSchema>;
      },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof keyopollsCommonApiBookmarkToggleBookmark>>,
  TError,
  {
    contentType: 'Poll' | 'GenericComment' | 'Article' | 'PollTodo';
    objectId: number;
    data: BodyType<ToggleBookmarkSchema>;
  },
  TContext
> => {
  const mutationOptions = getKeyopollsCommonApiBookmarkToggleBookmarkMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Create a new bookmark folder
 * @summary Create Bookmark Folder
 */
export const keyopollsCommonApiBookmarkCreateBookmarkFolder = (
  bookmarkFolderCreateSchema: BodyType<BookmarkFolderCreateSchema>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<BookmarkFolderDetailsSchema>(
    {
      url: `/api/common/bookmarks/folders`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: bookmarkFolderCreateSchema,
      signal,
    },
    options
  );
};

export const getKeyopollsCommonApiBookmarkCreateBookmarkFolderMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof keyopollsCommonApiBookmarkCreateBookmarkFolder>>,
    TError,
    { data: BodyType<BookmarkFolderCreateSchema> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof keyopollsCommonApiBookmarkCreateBookmarkFolder>>,
  TError,
  { data: BodyType<BookmarkFolderCreateSchema> },
  TContext
> => {
  const mutationKey = ['keyopollsCommonApiBookmarkCreateBookmarkFolder'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof keyopollsCommonApiBookmarkCreateBookmarkFolder>>,
    { data: BodyType<BookmarkFolderCreateSchema> }
  > = (props) => {
    const { data } = props ?? {};

    return keyopollsCommonApiBookmarkCreateBookmarkFolder(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type KeyopollsCommonApiBookmarkCreateBookmarkFolderMutationResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsCommonApiBookmarkCreateBookmarkFolder>>
>;
export type KeyopollsCommonApiBookmarkCreateBookmarkFolderMutationBody =
  BodyType<BookmarkFolderCreateSchema>;
export type KeyopollsCommonApiBookmarkCreateBookmarkFolderMutationError = ErrorType<Message>;

/**
 * @summary Create Bookmark Folder
 */
export const useKeyopollsCommonApiBookmarkCreateBookmarkFolder = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof keyopollsCommonApiBookmarkCreateBookmarkFolder>>,
      TError,
      { data: BodyType<BookmarkFolderCreateSchema> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof keyopollsCommonApiBookmarkCreateBookmarkFolder>>,
  TError,
  { data: BodyType<BookmarkFolderCreateSchema> },
  TContext
> => {
  const mutationOptions = getKeyopollsCommonApiBookmarkCreateBookmarkFolderMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Get bookmark folders for the authenticated user with filtering and pagination

Features:
- Pagination with customizable page size
- Filter by access level, content type, todo status, community
- Search in name and description
- Multiple ordering options
- Includes user's own folders + saved public folders + paid subscriptions
 * @summary Get Bookmark Folders
 */
export const keyopollsCommonApiBookmarkGetBookmarkFolders = (
  params?: KeyopollsCommonApiBookmarkGetBookmarkFoldersParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<BookmarkFoldersListResponseSchema>(
    { url: `/api/common/bookmarks/folders`, method: 'GET', params, signal },
    options
  );
};

export const getKeyopollsCommonApiBookmarkGetBookmarkFoldersQueryKey = (
  params?: KeyopollsCommonApiBookmarkGetBookmarkFoldersParams
) => {
  return [`/api/common/bookmarks/folders`, ...(params ? [params] : [])] as const;
};

export const getKeyopollsCommonApiBookmarkGetBookmarkFoldersQueryOptions = <
  TData = Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkFolders>>,
  TError = ErrorType<Message>,
>(
  params?: KeyopollsCommonApiBookmarkGetBookmarkFoldersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkFolders>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getKeyopollsCommonApiBookmarkGetBookmarkFoldersQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkFolders>>
  > = ({ signal }) => keyopollsCommonApiBookmarkGetBookmarkFolders(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkFolders>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type KeyopollsCommonApiBookmarkGetBookmarkFoldersQueryResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkFolders>>
>;
export type KeyopollsCommonApiBookmarkGetBookmarkFoldersQueryError = ErrorType<Message>;

export function useKeyopollsCommonApiBookmarkGetBookmarkFolders<
  TData = Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkFolders>>,
  TError = ErrorType<Message>,
>(
  params: undefined | KeyopollsCommonApiBookmarkGetBookmarkFoldersParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkFolders>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkFolders>>,
          TError,
          Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkFolders>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsCommonApiBookmarkGetBookmarkFolders<
  TData = Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkFolders>>,
  TError = ErrorType<Message>,
>(
  params?: KeyopollsCommonApiBookmarkGetBookmarkFoldersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkFolders>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkFolders>>,
          TError,
          Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkFolders>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsCommonApiBookmarkGetBookmarkFolders<
  TData = Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkFolders>>,
  TError = ErrorType<Message>,
>(
  params?: KeyopollsCommonApiBookmarkGetBookmarkFoldersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkFolders>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Bookmark Folders
 */

export function useKeyopollsCommonApiBookmarkGetBookmarkFolders<
  TData = Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkFolders>>,
  TError = ErrorType<Message>,
>(
  params?: KeyopollsCommonApiBookmarkGetBookmarkFoldersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkFolders>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getKeyopollsCommonApiBookmarkGetBookmarkFoldersQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Update an existing bookmark folder

Note: Paid folders cannot change their access level or content type
 * @summary Update Bookmark Folder
 */
export const keyopollsCommonApiBookmarkUpdateBookmarkFolder = (
  folderId: number,
  updateBookmarkFolderSchema: BodyType<UpdateBookmarkFolderSchema>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<BookmarkFolderDetailsSchema>(
    {
      url: `/api/common/bookmarks/folders/${folderId}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: updateBookmarkFolderSchema,
    },
    options
  );
};

export const getKeyopollsCommonApiBookmarkUpdateBookmarkFolderMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof keyopollsCommonApiBookmarkUpdateBookmarkFolder>>,
    TError,
    { folderId: number; data: BodyType<UpdateBookmarkFolderSchema> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof keyopollsCommonApiBookmarkUpdateBookmarkFolder>>,
  TError,
  { folderId: number; data: BodyType<UpdateBookmarkFolderSchema> },
  TContext
> => {
  const mutationKey = ['keyopollsCommonApiBookmarkUpdateBookmarkFolder'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof keyopollsCommonApiBookmarkUpdateBookmarkFolder>>,
    { folderId: number; data: BodyType<UpdateBookmarkFolderSchema> }
  > = (props) => {
    const { folderId, data } = props ?? {};

    return keyopollsCommonApiBookmarkUpdateBookmarkFolder(folderId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type KeyopollsCommonApiBookmarkUpdateBookmarkFolderMutationResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsCommonApiBookmarkUpdateBookmarkFolder>>
>;
export type KeyopollsCommonApiBookmarkUpdateBookmarkFolderMutationBody =
  BodyType<UpdateBookmarkFolderSchema>;
export type KeyopollsCommonApiBookmarkUpdateBookmarkFolderMutationError = ErrorType<Message>;

/**
 * @summary Update Bookmark Folder
 */
export const useKeyopollsCommonApiBookmarkUpdateBookmarkFolder = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof keyopollsCommonApiBookmarkUpdateBookmarkFolder>>,
      TError,
      { folderId: number; data: BodyType<UpdateBookmarkFolderSchema> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof keyopollsCommonApiBookmarkUpdateBookmarkFolder>>,
  TError,
  { folderId: number; data: BodyType<UpdateBookmarkFolderSchema> },
  TContext
> => {
  const mutationOptions = getKeyopollsCommonApiBookmarkUpdateBookmarkFolderMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Check bookmark status for multiple todos

Returns which todos are bookmarked and in which folders
 * @summary Check Todos Bookmark Status
 */
export const keyopollsCommonApiBookmarkCheckTodosBookmarkStatus = (
  todoBookmarkStatusSchema: BodyType<TodoBookmarkStatusSchema>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<TodoBookmarkStatusListResponseSchema>(
    {
      url: `/api/common/bookmarks/todos/bookmark-status`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: todoBookmarkStatusSchema,
      signal,
    },
    options
  );
};

export const getKeyopollsCommonApiBookmarkCheckTodosBookmarkStatusMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof keyopollsCommonApiBookmarkCheckTodosBookmarkStatus>>,
    TError,
    { data: BodyType<TodoBookmarkStatusSchema> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof keyopollsCommonApiBookmarkCheckTodosBookmarkStatus>>,
  TError,
  { data: BodyType<TodoBookmarkStatusSchema> },
  TContext
> => {
  const mutationKey = ['keyopollsCommonApiBookmarkCheckTodosBookmarkStatus'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof keyopollsCommonApiBookmarkCheckTodosBookmarkStatus>>,
    { data: BodyType<TodoBookmarkStatusSchema> }
  > = (props) => {
    const { data } = props ?? {};

    return keyopollsCommonApiBookmarkCheckTodosBookmarkStatus(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type KeyopollsCommonApiBookmarkCheckTodosBookmarkStatusMutationResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsCommonApiBookmarkCheckTodosBookmarkStatus>>
>;
export type KeyopollsCommonApiBookmarkCheckTodosBookmarkStatusMutationBody =
  BodyType<TodoBookmarkStatusSchema>;
export type KeyopollsCommonApiBookmarkCheckTodosBookmarkStatusMutationError = ErrorType<Message>;

/**
 * @summary Check Todos Bookmark Status
 */
export const useKeyopollsCommonApiBookmarkCheckTodosBookmarkStatus = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof keyopollsCommonApiBookmarkCheckTodosBookmarkStatus>>,
      TError,
      { data: BodyType<TodoBookmarkStatusSchema> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof keyopollsCommonApiBookmarkCheckTodosBookmarkStatus>>,
  TError,
  { data: BodyType<TodoBookmarkStatusSchema> },
  TContext
> => {
  const mutationOptions =
    getKeyopollsCommonApiBookmarkCheckTodosBookmarkStatusMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
