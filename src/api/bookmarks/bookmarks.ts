/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Keyo API
 * API for Keyo Polls app
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { customInstance } from '.././custom-instance';
import type { BodyType, ErrorType } from '.././custom-instance';
import type {
  KeyopollsCommonApiBookmarkCreateBookmarkFolder200,
  KeyopollsCommonApiBookmarkCreateBookmarkFolderParams,
  KeyopollsCommonApiBookmarkDeleteBookmarkFolder200,
  KeyopollsCommonApiBookmarkGetBookmarkStatus200,
  KeyopollsCommonApiBookmarkGetUserBookmarksParams,
  Message,
  ToggleBookmarkResponseSchema,
  ToggleBookmarkSchema,
} from '.././schemas';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Toggle bookmark status for content using pseudonymous profile.

All bookmarks are created and managed through the user's pseudonymous profile.
This provides consistent bookmark management and better organization.
 * @summary Toggle Bookmark
 */
export const keyopollsCommonApiBookmarkToggleBookmark = (
  contentType: 'Poll' | 'GenericComment',
  objectId: number,
  toggleBookmarkSchema: BodyType<ToggleBookmarkSchema>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<ToggleBookmarkResponseSchema>(
    {
      url: `/api/common/bookmarks/${contentType}/${objectId}/bookmark`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: toggleBookmarkSchema,
      signal,
    },
    options
  );
};

export const getKeyopollsCommonApiBookmarkToggleBookmarkMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof keyopollsCommonApiBookmarkToggleBookmark>>,
    TError,
    {
      contentType: 'Poll' | 'GenericComment';
      objectId: number;
      data: BodyType<ToggleBookmarkSchema>;
    },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof keyopollsCommonApiBookmarkToggleBookmark>>,
  TError,
  {
    contentType: 'Poll' | 'GenericComment';
    objectId: number;
    data: BodyType<ToggleBookmarkSchema>;
  },
  TContext
> => {
  const mutationKey = ['keyopollsCommonApiBookmarkToggleBookmark'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof keyopollsCommonApiBookmarkToggleBookmark>>,
    {
      contentType: 'Poll' | 'GenericComment';
      objectId: number;
      data: BodyType<ToggleBookmarkSchema>;
    }
  > = (props) => {
    const { contentType, objectId, data } = props ?? {};

    return keyopollsCommonApiBookmarkToggleBookmark(contentType, objectId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type KeyopollsCommonApiBookmarkToggleBookmarkMutationResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsCommonApiBookmarkToggleBookmark>>
>;
export type KeyopollsCommonApiBookmarkToggleBookmarkMutationBody = BodyType<ToggleBookmarkSchema>;
export type KeyopollsCommonApiBookmarkToggleBookmarkMutationError = ErrorType<Message>;

/**
 * @summary Toggle Bookmark
 */
export const useKeyopollsCommonApiBookmarkToggleBookmark = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof keyopollsCommonApiBookmarkToggleBookmark>>,
      TError,
      {
        contentType: 'Poll' | 'GenericComment';
        objectId: number;
        data: BodyType<ToggleBookmarkSchema>;
      },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof keyopollsCommonApiBookmarkToggleBookmark>>,
  TError,
  {
    contentType: 'Poll' | 'GenericComment';
    objectId: number;
    data: BodyType<ToggleBookmarkSchema>;
  },
  TContext
> => {
  const mutationOptions = getKeyopollsCommonApiBookmarkToggleBookmarkMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Get all bookmark folders for the authenticated user
 * @summary Get Bookmark Folders
 */
export const keyopollsCommonApiBookmarkGetBookmarkFolders = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<unknown[]>(
    { url: `/api/common/bookmarks/folders`, method: 'GET', signal },
    options
  );
};

export const getKeyopollsCommonApiBookmarkGetBookmarkFoldersQueryKey = () => {
  return [`/api/common/bookmarks/folders`] as const;
};

export const getKeyopollsCommonApiBookmarkGetBookmarkFoldersQueryOptions = <
  TData = Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkFolders>>,
  TError = ErrorType<Message>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkFolders>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getKeyopollsCommonApiBookmarkGetBookmarkFoldersQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkFolders>>
  > = ({ signal }) => keyopollsCommonApiBookmarkGetBookmarkFolders(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkFolders>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type KeyopollsCommonApiBookmarkGetBookmarkFoldersQueryResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkFolders>>
>;
export type KeyopollsCommonApiBookmarkGetBookmarkFoldersQueryError = ErrorType<Message>;

export function useKeyopollsCommonApiBookmarkGetBookmarkFolders<
  TData = Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkFolders>>,
  TError = ErrorType<Message>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkFolders>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkFolders>>,
          TError,
          Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkFolders>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsCommonApiBookmarkGetBookmarkFolders<
  TData = Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkFolders>>,
  TError = ErrorType<Message>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkFolders>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkFolders>>,
          TError,
          Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkFolders>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsCommonApiBookmarkGetBookmarkFolders<
  TData = Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkFolders>>,
  TError = ErrorType<Message>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkFolders>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Bookmark Folders
 */

export function useKeyopollsCommonApiBookmarkGetBookmarkFolders<
  TData = Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkFolders>>,
  TError = ErrorType<Message>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkFolders>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getKeyopollsCommonApiBookmarkGetBookmarkFoldersQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create a new bookmark folder
 * @summary Create Bookmark Folder
 */
export const keyopollsCommonApiBookmarkCreateBookmarkFolder = (
  params: KeyopollsCommonApiBookmarkCreateBookmarkFolderParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<KeyopollsCommonApiBookmarkCreateBookmarkFolder200>(
    { url: `/api/common/bookmarks/folders`, method: 'POST', params, signal },
    options
  );
};

export const getKeyopollsCommonApiBookmarkCreateBookmarkFolderMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof keyopollsCommonApiBookmarkCreateBookmarkFolder>>,
    TError,
    { params: KeyopollsCommonApiBookmarkCreateBookmarkFolderParams },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof keyopollsCommonApiBookmarkCreateBookmarkFolder>>,
  TError,
  { params: KeyopollsCommonApiBookmarkCreateBookmarkFolderParams },
  TContext
> => {
  const mutationKey = ['keyopollsCommonApiBookmarkCreateBookmarkFolder'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof keyopollsCommonApiBookmarkCreateBookmarkFolder>>,
    { params: KeyopollsCommonApiBookmarkCreateBookmarkFolderParams }
  > = (props) => {
    const { params } = props ?? {};

    return keyopollsCommonApiBookmarkCreateBookmarkFolder(params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type KeyopollsCommonApiBookmarkCreateBookmarkFolderMutationResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsCommonApiBookmarkCreateBookmarkFolder>>
>;

export type KeyopollsCommonApiBookmarkCreateBookmarkFolderMutationError = ErrorType<Message>;

/**
 * @summary Create Bookmark Folder
 */
export const useKeyopollsCommonApiBookmarkCreateBookmarkFolder = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof keyopollsCommonApiBookmarkCreateBookmarkFolder>>,
      TError,
      { params: KeyopollsCommonApiBookmarkCreateBookmarkFolderParams },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof keyopollsCommonApiBookmarkCreateBookmarkFolder>>,
  TError,
  { params: KeyopollsCommonApiBookmarkCreateBookmarkFolderParams },
  TContext
> => {
  const mutationOptions = getKeyopollsCommonApiBookmarkCreateBookmarkFolderMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Get user's bookmarks with optional filtering
 * @summary Get User Bookmarks
 */
export const keyopollsCommonApiBookmarkGetUserBookmarks = (
  params?: KeyopollsCommonApiBookmarkGetUserBookmarksParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<unknown[]>(
    { url: `/api/common/bookmarks/bookmarks`, method: 'GET', params, signal },
    options
  );
};

export const getKeyopollsCommonApiBookmarkGetUserBookmarksQueryKey = (
  params?: KeyopollsCommonApiBookmarkGetUserBookmarksParams
) => {
  return [`/api/common/bookmarks/bookmarks`, ...(params ? [params] : [])] as const;
};

export const getKeyopollsCommonApiBookmarkGetUserBookmarksQueryOptions = <
  TData = Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetUserBookmarks>>,
  TError = ErrorType<Message>,
>(
  params?: KeyopollsCommonApiBookmarkGetUserBookmarksParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetUserBookmarks>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getKeyopollsCommonApiBookmarkGetUserBookmarksQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetUserBookmarks>>
  > = ({ signal }) => keyopollsCommonApiBookmarkGetUserBookmarks(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetUserBookmarks>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type KeyopollsCommonApiBookmarkGetUserBookmarksQueryResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetUserBookmarks>>
>;
export type KeyopollsCommonApiBookmarkGetUserBookmarksQueryError = ErrorType<Message>;

export function useKeyopollsCommonApiBookmarkGetUserBookmarks<
  TData = Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetUserBookmarks>>,
  TError = ErrorType<Message>,
>(
  params: undefined | KeyopollsCommonApiBookmarkGetUserBookmarksParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetUserBookmarks>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetUserBookmarks>>,
          TError,
          Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetUserBookmarks>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsCommonApiBookmarkGetUserBookmarks<
  TData = Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetUserBookmarks>>,
  TError = ErrorType<Message>,
>(
  params?: KeyopollsCommonApiBookmarkGetUserBookmarksParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetUserBookmarks>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetUserBookmarks>>,
          TError,
          Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetUserBookmarks>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsCommonApiBookmarkGetUserBookmarks<
  TData = Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetUserBookmarks>>,
  TError = ErrorType<Message>,
>(
  params?: KeyopollsCommonApiBookmarkGetUserBookmarksParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetUserBookmarks>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get User Bookmarks
 */

export function useKeyopollsCommonApiBookmarkGetUserBookmarks<
  TData = Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetUserBookmarks>>,
  TError = ErrorType<Message>,
>(
  params?: KeyopollsCommonApiBookmarkGetUserBookmarksParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetUserBookmarks>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getKeyopollsCommonApiBookmarkGetUserBookmarksQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Check if content is bookmarked by the current user
 * @summary Get Bookmark Status
 */
export const keyopollsCommonApiBookmarkGetBookmarkStatus = (
  contentType: 'Poll' | 'GenericComment',
  objectId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<KeyopollsCommonApiBookmarkGetBookmarkStatus200>(
    {
      url: `/api/common/bookmarks/${contentType}/${objectId}/bookmark-status`,
      method: 'GET',
      signal,
    },
    options
  );
};

export const getKeyopollsCommonApiBookmarkGetBookmarkStatusQueryKey = (
  contentType: 'Poll' | 'GenericComment',
  objectId: number
) => {
  return [`/api/common/bookmarks/${contentType}/${objectId}/bookmark-status`] as const;
};

export const getKeyopollsCommonApiBookmarkGetBookmarkStatusQueryOptions = <
  TData = Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkStatus>>,
  TError = ErrorType<Message>,
>(
  contentType: 'Poll' | 'GenericComment',
  objectId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkStatus>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getKeyopollsCommonApiBookmarkGetBookmarkStatusQueryKey(contentType, objectId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkStatus>>
  > = ({ signal }) =>
    keyopollsCommonApiBookmarkGetBookmarkStatus(contentType, objectId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(contentType && objectId),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkStatus>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type KeyopollsCommonApiBookmarkGetBookmarkStatusQueryResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkStatus>>
>;
export type KeyopollsCommonApiBookmarkGetBookmarkStatusQueryError = ErrorType<Message>;

export function useKeyopollsCommonApiBookmarkGetBookmarkStatus<
  TData = Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkStatus>>,
  TError = ErrorType<Message>,
>(
  contentType: 'Poll' | 'GenericComment',
  objectId: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkStatus>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkStatus>>,
          TError,
          Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkStatus>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsCommonApiBookmarkGetBookmarkStatus<
  TData = Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkStatus>>,
  TError = ErrorType<Message>,
>(
  contentType: 'Poll' | 'GenericComment',
  objectId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkStatus>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkStatus>>,
          TError,
          Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkStatus>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsCommonApiBookmarkGetBookmarkStatus<
  TData = Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkStatus>>,
  TError = ErrorType<Message>,
>(
  contentType: 'Poll' | 'GenericComment',
  objectId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkStatus>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Bookmark Status
 */

export function useKeyopollsCommonApiBookmarkGetBookmarkStatus<
  TData = Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkStatus>>,
  TError = ErrorType<Message>,
>(
  contentType: 'Poll' | 'GenericComment',
  objectId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsCommonApiBookmarkGetBookmarkStatus>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getKeyopollsCommonApiBookmarkGetBookmarkStatusQueryOptions(
    contentType,
    objectId,
    options
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Delete a bookmark folder (bookmarks will be moved to no folder)
 * @summary Delete Bookmark Folder
 */
export const keyopollsCommonApiBookmarkDeleteBookmarkFolder = (
  folderId: number,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<KeyopollsCommonApiBookmarkDeleteBookmarkFolder200>(
    { url: `/api/common/bookmarks/folders/${folderId}`, method: 'DELETE' },
    options
  );
};

export const getKeyopollsCommonApiBookmarkDeleteBookmarkFolderMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof keyopollsCommonApiBookmarkDeleteBookmarkFolder>>,
    TError,
    { folderId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof keyopollsCommonApiBookmarkDeleteBookmarkFolder>>,
  TError,
  { folderId: number },
  TContext
> => {
  const mutationKey = ['keyopollsCommonApiBookmarkDeleteBookmarkFolder'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof keyopollsCommonApiBookmarkDeleteBookmarkFolder>>,
    { folderId: number }
  > = (props) => {
    const { folderId } = props ?? {};

    return keyopollsCommonApiBookmarkDeleteBookmarkFolder(folderId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type KeyopollsCommonApiBookmarkDeleteBookmarkFolderMutationResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsCommonApiBookmarkDeleteBookmarkFolder>>
>;

export type KeyopollsCommonApiBookmarkDeleteBookmarkFolderMutationError = ErrorType<Message>;

/**
 * @summary Delete Bookmark Folder
 */
export const useKeyopollsCommonApiBookmarkDeleteBookmarkFolder = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof keyopollsCommonApiBookmarkDeleteBookmarkFolder>>,
      TError,
      { folderId: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof keyopollsCommonApiBookmarkDeleteBookmarkFolder>>,
  TError,
  { folderId: number },
  TContext
> => {
  const mutationOptions = getKeyopollsCommonApiBookmarkDeleteBookmarkFolderMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
