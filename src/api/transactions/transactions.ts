/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Keyo API
 * API for Keyo Polls app
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { customInstance } from '.././custom-instance';
import type { ErrorType } from '.././custom-instance';
import type {
  CreditsSummarySchema,
  KeyopollsTransactionsApiGetUserTransactionsParams,
  Message,
  TransactionSummarySchema,
  TransactionsResponseSchema,
} from '.././schemas';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Get user's transaction history with comprehensive filtering and summary.

Features:
- Filter by transaction type, status, amount range, date range
- Search in transaction descriptions
- Filter credits/debits only
- Pagination with configurable page size
- Multiple sorting options
- Transaction summary with balance calculation
- Includes related timeline items for message transactions

Query Parameters:
- transaction_type: Filter by type (purchase, message_sent, message_received,
  refund, bonus)
- status: Filter by status (pending, completed, failed, cancelled)
- min_amount/max_amount: Amount range filtering
- date_from/date_to: Date range filtering (YYYY-MM-DD format)
- payment_method: Filter by payment method
- search: Search in transaction descriptions
- credits_only: Show only credit transactions
- debits_only: Show only debit transactions
- page: Page number (default: 1)
- per_page: Items per page (default: 20, max: 100)
- order_by: Sort field (created_at, -created_at, amount, -amount, completed_at,
  -completed_at)
 * @summary Get User Transactions
 */
export const keyopollsTransactionsApiGetUserTransactions = (
  params?: KeyopollsTransactionsApiGetUserTransactionsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<TransactionsResponseSchema>(
    { url: `/api/transactions/transactions`, method: 'GET', params, signal },
    options
  );
};

export const getKeyopollsTransactionsApiGetUserTransactionsQueryKey = (
  params?: KeyopollsTransactionsApiGetUserTransactionsParams
) => {
  return [`/api/transactions/transactions`, ...(params ? [params] : [])] as const;
};

export const getKeyopollsTransactionsApiGetUserTransactionsQueryOptions = <
  TData = Awaited<ReturnType<typeof keyopollsTransactionsApiGetUserTransactions>>,
  TError = ErrorType<Message>,
>(
  params?: KeyopollsTransactionsApiGetUserTransactionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsTransactionsApiGetUserTransactions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getKeyopollsTransactionsApiGetUserTransactionsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof keyopollsTransactionsApiGetUserTransactions>>
  > = ({ signal }) => keyopollsTransactionsApiGetUserTransactions(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof keyopollsTransactionsApiGetUserTransactions>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type KeyopollsTransactionsApiGetUserTransactionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsTransactionsApiGetUserTransactions>>
>;
export type KeyopollsTransactionsApiGetUserTransactionsQueryError = ErrorType<Message>;

export function useKeyopollsTransactionsApiGetUserTransactions<
  TData = Awaited<ReturnType<typeof keyopollsTransactionsApiGetUserTransactions>>,
  TError = ErrorType<Message>,
>(
  params: undefined | KeyopollsTransactionsApiGetUserTransactionsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsTransactionsApiGetUserTransactions>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsTransactionsApiGetUserTransactions>>,
          TError,
          Awaited<ReturnType<typeof keyopollsTransactionsApiGetUserTransactions>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsTransactionsApiGetUserTransactions<
  TData = Awaited<ReturnType<typeof keyopollsTransactionsApiGetUserTransactions>>,
  TError = ErrorType<Message>,
>(
  params?: KeyopollsTransactionsApiGetUserTransactionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsTransactionsApiGetUserTransactions>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsTransactionsApiGetUserTransactions>>,
          TError,
          Awaited<ReturnType<typeof keyopollsTransactionsApiGetUserTransactions>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsTransactionsApiGetUserTransactions<
  TData = Awaited<ReturnType<typeof keyopollsTransactionsApiGetUserTransactions>>,
  TError = ErrorType<Message>,
>(
  params?: KeyopollsTransactionsApiGetUserTransactionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsTransactionsApiGetUserTransactions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get User Transactions
 */

export function useKeyopollsTransactionsApiGetUserTransactions<
  TData = Awaited<ReturnType<typeof keyopollsTransactionsApiGetUserTransactions>>,
  TError = ErrorType<Message>,
>(
  params?: KeyopollsTransactionsApiGetUserTransactionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsTransactionsApiGetUserTransactions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getKeyopollsTransactionsApiGetUserTransactionsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get a quick summary of user's transaction data.

Returns:
- Total credits earned
- Total debits spent
- Current balance
- Total transaction count
- Pending transaction amount
 * @summary Get User Transaction Summary
 */
export const keyopollsTransactionsApiGetUserTransactionSummary = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<TransactionSummarySchema>(
    { url: `/api/transactions/transactions/summary`, method: 'GET', signal },
    options
  );
};

export const getKeyopollsTransactionsApiGetUserTransactionSummaryQueryKey = () => {
  return [`/api/transactions/transactions/summary`] as const;
};

export const getKeyopollsTransactionsApiGetUserTransactionSummaryQueryOptions = <
  TData = Awaited<ReturnType<typeof keyopollsTransactionsApiGetUserTransactionSummary>>,
  TError = ErrorType<Message>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof keyopollsTransactionsApiGetUserTransactionSummary>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getKeyopollsTransactionsApiGetUserTransactionSummaryQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof keyopollsTransactionsApiGetUserTransactionSummary>>
  > = ({ signal }) => keyopollsTransactionsApiGetUserTransactionSummary(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof keyopollsTransactionsApiGetUserTransactionSummary>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type KeyopollsTransactionsApiGetUserTransactionSummaryQueryResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsTransactionsApiGetUserTransactionSummary>>
>;
export type KeyopollsTransactionsApiGetUserTransactionSummaryQueryError = ErrorType<Message>;

export function useKeyopollsTransactionsApiGetUserTransactionSummary<
  TData = Awaited<ReturnType<typeof keyopollsTransactionsApiGetUserTransactionSummary>>,
  TError = ErrorType<Message>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsTransactionsApiGetUserTransactionSummary>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsTransactionsApiGetUserTransactionSummary>>,
          TError,
          Awaited<ReturnType<typeof keyopollsTransactionsApiGetUserTransactionSummary>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsTransactionsApiGetUserTransactionSummary<
  TData = Awaited<ReturnType<typeof keyopollsTransactionsApiGetUserTransactionSummary>>,
  TError = ErrorType<Message>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsTransactionsApiGetUserTransactionSummary>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsTransactionsApiGetUserTransactionSummary>>,
          TError,
          Awaited<ReturnType<typeof keyopollsTransactionsApiGetUserTransactionSummary>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsTransactionsApiGetUserTransactionSummary<
  TData = Awaited<ReturnType<typeof keyopollsTransactionsApiGetUserTransactionSummary>>,
  TError = ErrorType<Message>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsTransactionsApiGetUserTransactionSummary>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get User Transaction Summary
 */

export function useKeyopollsTransactionsApiGetUserTransactionSummary<
  TData = Awaited<ReturnType<typeof keyopollsTransactionsApiGetUserTransactionSummary>>,
  TError = ErrorType<Message>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsTransactionsApiGetUserTransactionSummary>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getKeyopollsTransactionsApiGetUserTransactionSummaryQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get the total credits, credits spent, and credits earned for the authenticated user.
 * @summary Get Credits Summary
 */
export const keyopollsTransactionsApiGetCreditsSummary = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<CreditsSummarySchema>(
    { url: `/api/transactions/credits/summary`, method: 'GET', signal },
    options
  );
};

export const getKeyopollsTransactionsApiGetCreditsSummaryQueryKey = () => {
  return [`/api/transactions/credits/summary`] as const;
};

export const getKeyopollsTransactionsApiGetCreditsSummaryQueryOptions = <
  TData = Awaited<ReturnType<typeof keyopollsTransactionsApiGetCreditsSummary>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof keyopollsTransactionsApiGetCreditsSummary>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getKeyopollsTransactionsApiGetCreditsSummaryQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof keyopollsTransactionsApiGetCreditsSummary>>
  > = ({ signal }) => keyopollsTransactionsApiGetCreditsSummary(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof keyopollsTransactionsApiGetCreditsSummary>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type KeyopollsTransactionsApiGetCreditsSummaryQueryResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsTransactionsApiGetCreditsSummary>>
>;
export type KeyopollsTransactionsApiGetCreditsSummaryQueryError = ErrorType<unknown>;

export function useKeyopollsTransactionsApiGetCreditsSummary<
  TData = Awaited<ReturnType<typeof keyopollsTransactionsApiGetCreditsSummary>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsTransactionsApiGetCreditsSummary>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsTransactionsApiGetCreditsSummary>>,
          TError,
          Awaited<ReturnType<typeof keyopollsTransactionsApiGetCreditsSummary>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsTransactionsApiGetCreditsSummary<
  TData = Awaited<ReturnType<typeof keyopollsTransactionsApiGetCreditsSummary>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsTransactionsApiGetCreditsSummary>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsTransactionsApiGetCreditsSummary>>,
          TError,
          Awaited<ReturnType<typeof keyopollsTransactionsApiGetCreditsSummary>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsTransactionsApiGetCreditsSummary<
  TData = Awaited<ReturnType<typeof keyopollsTransactionsApiGetCreditsSummary>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsTransactionsApiGetCreditsSummary>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get Credits Summary
 */

export function useKeyopollsTransactionsApiGetCreditsSummary<
  TData = Awaited<ReturnType<typeof keyopollsTransactionsApiGetCreditsSummary>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsTransactionsApiGetCreditsSummary>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getKeyopollsTransactionsApiGetCreditsSummaryQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
