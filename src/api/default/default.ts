/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Keyo API
 * API for Keyo Polls app
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { customInstance } from '.././custom-instance';
import type { BodyType, ErrorType } from '.././custom-instance';
import type {
  CompleteGoogleRegistrationResponseSchema,
  CompleteGoogleRegistrationSchema,
  CompleteRegistrationResponseSchema,
  CompleteRegistrationSchema,
  GoogleSignInResponseSchema,
  GoogleSignInSchema,
  LoginResponseSchema,
  LoginSchema,
  Message,
  SendOTPResponseSchema,
  SendOTPSchema,
  UsernameAvailabilitySchema,
  VerifyOTPResponseSchema,
  VerifyOTPSchema,
} from '.././schemas';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Handle Google Sign-In - creates incomplete profile requiring completion
 * @summary Google Signin
 */
export const keyopollsProfileApiAuthGoogleSignin = (
  googleSignInSchema: BodyType<GoogleSignInSchema>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<GoogleSignInResponseSchema>(
    {
      url: `/api/user/auth/google`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: googleSignInSchema,
      signal,
    },
    options
  );
};

export const getKeyopollsProfileApiAuthGoogleSigninMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof keyopollsProfileApiAuthGoogleSignin>>,
    TError,
    { data: BodyType<GoogleSignInSchema> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof keyopollsProfileApiAuthGoogleSignin>>,
  TError,
  { data: BodyType<GoogleSignInSchema> },
  TContext
> => {
  const mutationKey = ['keyopollsProfileApiAuthGoogleSignin'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof keyopollsProfileApiAuthGoogleSignin>>,
    { data: BodyType<GoogleSignInSchema> }
  > = (props) => {
    const { data } = props ?? {};

    return keyopollsProfileApiAuthGoogleSignin(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type KeyopollsProfileApiAuthGoogleSigninMutationResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsProfileApiAuthGoogleSignin>>
>;
export type KeyopollsProfileApiAuthGoogleSigninMutationBody = BodyType<GoogleSignInSchema>;
export type KeyopollsProfileApiAuthGoogleSigninMutationError = ErrorType<Message>;

/**
 * @summary Google Signin
 */
export const useKeyopollsProfileApiAuthGoogleSignin = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof keyopollsProfileApiAuthGoogleSignin>>,
      TError,
      { data: BodyType<GoogleSignInSchema> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof keyopollsProfileApiAuthGoogleSignin>>,
  TError,
  { data: BodyType<GoogleSignInSchema> },
  TContext
> => {
  const mutationOptions = getKeyopollsProfileApiAuthGoogleSigninMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Send OTP for email verification
 * @summary Send Otp
 */
export const keyopollsProfileApiAuthSendOtp = (
  sendOTPSchema: BodyType<SendOTPSchema>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<SendOTPResponseSchema>(
    {
      url: `/api/user/auth/send-otp`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: sendOTPSchema,
      signal,
    },
    options
  );
};

export const getKeyopollsProfileApiAuthSendOtpMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof keyopollsProfileApiAuthSendOtp>>,
    TError,
    { data: BodyType<SendOTPSchema> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof keyopollsProfileApiAuthSendOtp>>,
  TError,
  { data: BodyType<SendOTPSchema> },
  TContext
> => {
  const mutationKey = ['keyopollsProfileApiAuthSendOtp'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof keyopollsProfileApiAuthSendOtp>>,
    { data: BodyType<SendOTPSchema> }
  > = (props) => {
    const { data } = props ?? {};

    return keyopollsProfileApiAuthSendOtp(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type KeyopollsProfileApiAuthSendOtpMutationResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsProfileApiAuthSendOtp>>
>;
export type KeyopollsProfileApiAuthSendOtpMutationBody = BodyType<SendOTPSchema>;
export type KeyopollsProfileApiAuthSendOtpMutationError = ErrorType<Message>;

/**
 * @summary Send Otp
 */
export const useKeyopollsProfileApiAuthSendOtp = <TError = ErrorType<Message>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof keyopollsProfileApiAuthSendOtp>>,
      TError,
      { data: BodyType<SendOTPSchema> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof keyopollsProfileApiAuthSendOtp>>,
  TError,
  { data: BodyType<SendOTPSchema> },
  TContext
> => {
  const mutationOptions = getKeyopollsProfileApiAuthSendOtpMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Verify OTP
 * @summary Verify Otp
 */
export const keyopollsProfileApiAuthVerifyOtp = (
  verifyOTPSchema: BodyType<VerifyOTPSchema>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<VerifyOTPResponseSchema>(
    {
      url: `/api/user/auth/verify-otp`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: verifyOTPSchema,
      signal,
    },
    options
  );
};

export const getKeyopollsProfileApiAuthVerifyOtpMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof keyopollsProfileApiAuthVerifyOtp>>,
    TError,
    { data: BodyType<VerifyOTPSchema> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof keyopollsProfileApiAuthVerifyOtp>>,
  TError,
  { data: BodyType<VerifyOTPSchema> },
  TContext
> => {
  const mutationKey = ['keyopollsProfileApiAuthVerifyOtp'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof keyopollsProfileApiAuthVerifyOtp>>,
    { data: BodyType<VerifyOTPSchema> }
  > = (props) => {
    const { data } = props ?? {};

    return keyopollsProfileApiAuthVerifyOtp(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type KeyopollsProfileApiAuthVerifyOtpMutationResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsProfileApiAuthVerifyOtp>>
>;
export type KeyopollsProfileApiAuthVerifyOtpMutationBody = BodyType<VerifyOTPSchema>;
export type KeyopollsProfileApiAuthVerifyOtpMutationError = ErrorType<Message>;

/**
 * @summary Verify Otp
 */
export const useKeyopollsProfileApiAuthVerifyOtp = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof keyopollsProfileApiAuthVerifyOtp>>,
      TError,
      { data: BodyType<VerifyOTPSchema> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof keyopollsProfileApiAuthVerifyOtp>>,
  TError,
  { data: BodyType<VerifyOTPSchema> },
  TContext
> => {
  const mutationOptions = getKeyopollsProfileApiAuthVerifyOtpMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Complete Google registration after initial sign-in
 * @summary Complete Google Registration
 */
export const keyopollsProfileApiAuthCompleteGoogleRegistration = (
  completeGoogleRegistrationSchema: BodyType<CompleteGoogleRegistrationSchema>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<CompleteGoogleRegistrationResponseSchema>(
    {
      url: `/api/user/auth/complete-google-registration`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: completeGoogleRegistrationSchema,
      signal,
    },
    options
  );
};

export const getKeyopollsProfileApiAuthCompleteGoogleRegistrationMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof keyopollsProfileApiAuthCompleteGoogleRegistration>>,
    TError,
    { data: BodyType<CompleteGoogleRegistrationSchema> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof keyopollsProfileApiAuthCompleteGoogleRegistration>>,
  TError,
  { data: BodyType<CompleteGoogleRegistrationSchema> },
  TContext
> => {
  const mutationKey = ['keyopollsProfileApiAuthCompleteGoogleRegistration'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof keyopollsProfileApiAuthCompleteGoogleRegistration>>,
    { data: BodyType<CompleteGoogleRegistrationSchema> }
  > = (props) => {
    const { data } = props ?? {};

    return keyopollsProfileApiAuthCompleteGoogleRegistration(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type KeyopollsProfileApiAuthCompleteGoogleRegistrationMutationResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsProfileApiAuthCompleteGoogleRegistration>>
>;
export type KeyopollsProfileApiAuthCompleteGoogleRegistrationMutationBody =
  BodyType<CompleteGoogleRegistrationSchema>;
export type KeyopollsProfileApiAuthCompleteGoogleRegistrationMutationError = ErrorType<Message>;

/**
 * @summary Complete Google Registration
 */
export const useKeyopollsProfileApiAuthCompleteGoogleRegistration = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof keyopollsProfileApiAuthCompleteGoogleRegistration>>,
      TError,
      { data: BodyType<CompleteGoogleRegistrationSchema> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof keyopollsProfileApiAuthCompleteGoogleRegistration>>,
  TError,
  { data: BodyType<CompleteGoogleRegistrationSchema> },
  TContext
> => {
  const mutationOptions =
    getKeyopollsProfileApiAuthCompleteGoogleRegistrationMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Complete registration after OTP verification
 * @summary Complete Registration
 */
export const keyopollsProfileApiAuthCompleteRegistration = (
  completeRegistrationSchema: BodyType<CompleteRegistrationSchema>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<CompleteRegistrationResponseSchema>(
    {
      url: `/api/user/auth/complete-registration`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: completeRegistrationSchema,
      signal,
    },
    options
  );
};

export const getKeyopollsProfileApiAuthCompleteRegistrationMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof keyopollsProfileApiAuthCompleteRegistration>>,
    TError,
    { data: BodyType<CompleteRegistrationSchema> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof keyopollsProfileApiAuthCompleteRegistration>>,
  TError,
  { data: BodyType<CompleteRegistrationSchema> },
  TContext
> => {
  const mutationKey = ['keyopollsProfileApiAuthCompleteRegistration'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof keyopollsProfileApiAuthCompleteRegistration>>,
    { data: BodyType<CompleteRegistrationSchema> }
  > = (props) => {
    const { data } = props ?? {};

    return keyopollsProfileApiAuthCompleteRegistration(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type KeyopollsProfileApiAuthCompleteRegistrationMutationResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsProfileApiAuthCompleteRegistration>>
>;
export type KeyopollsProfileApiAuthCompleteRegistrationMutationBody =
  BodyType<CompleteRegistrationSchema>;
export type KeyopollsProfileApiAuthCompleteRegistrationMutationError = ErrorType<Message>;

/**
 * @summary Complete Registration
 */
export const useKeyopollsProfileApiAuthCompleteRegistration = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof keyopollsProfileApiAuthCompleteRegistration>>,
      TError,
      { data: BodyType<CompleteRegistrationSchema> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof keyopollsProfileApiAuthCompleteRegistration>>,
  TError,
  { data: BodyType<CompleteRegistrationSchema> },
  TContext
> => {
  const mutationOptions = getKeyopollsProfileApiAuthCompleteRegistrationMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Login with email or username and password
 * @summary Login
 */
export const keyopollsProfileApiAuthLogin = (
  loginSchema: BodyType<LoginSchema>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<LoginResponseSchema>(
    {
      url: `/api/user/auth/login`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: loginSchema,
      signal,
    },
    options
  );
};

export const getKeyopollsProfileApiAuthLoginMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof keyopollsProfileApiAuthLogin>>,
    TError,
    { data: BodyType<LoginSchema> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof keyopollsProfileApiAuthLogin>>,
  TError,
  { data: BodyType<LoginSchema> },
  TContext
> => {
  const mutationKey = ['keyopollsProfileApiAuthLogin'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof keyopollsProfileApiAuthLogin>>,
    { data: BodyType<LoginSchema> }
  > = (props) => {
    const { data } = props ?? {};

    return keyopollsProfileApiAuthLogin(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type KeyopollsProfileApiAuthLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsProfileApiAuthLogin>>
>;
export type KeyopollsProfileApiAuthLoginMutationBody = BodyType<LoginSchema>;
export type KeyopollsProfileApiAuthLoginMutationError = ErrorType<Message>;

/**
 * @summary Login
 */
export const useKeyopollsProfileApiAuthLogin = <TError = ErrorType<Message>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof keyopollsProfileApiAuthLogin>>,
      TError,
      { data: BodyType<LoginSchema> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof keyopollsProfileApiAuthLogin>>,
  TError,
  { data: BodyType<LoginSchema> },
  TContext
> => {
  const mutationOptions = getKeyopollsProfileApiAuthLoginMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Check if username is available
 * @summary Check Username Availability
 */
export const keyopollsProfileApiAuthCheckUsernameAvailability = (
  username: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<UsernameAvailabilitySchema>(
    { url: `/api/user/auth/check-username/${username}`, method: 'GET', signal },
    options
  );
};

export const getKeyopollsProfileApiAuthCheckUsernameAvailabilityQueryKey = (username: string) => {
  return [`/api/user/auth/check-username/${username}`] as const;
};

export const getKeyopollsProfileApiAuthCheckUsernameAvailabilityQueryOptions = <
  TData = Awaited<ReturnType<typeof keyopollsProfileApiAuthCheckUsernameAvailability>>,
  TError = ErrorType<Message>,
>(
  username: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsProfileApiAuthCheckUsernameAvailability>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getKeyopollsProfileApiAuthCheckUsernameAvailabilityQueryKey(username);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof keyopollsProfileApiAuthCheckUsernameAvailability>>
  > = ({ signal }) =>
    keyopollsProfileApiAuthCheckUsernameAvailability(username, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!username, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof keyopollsProfileApiAuthCheckUsernameAvailability>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type KeyopollsProfileApiAuthCheckUsernameAvailabilityQueryResult = NonNullable<
  Awaited<ReturnType<typeof keyopollsProfileApiAuthCheckUsernameAvailability>>
>;
export type KeyopollsProfileApiAuthCheckUsernameAvailabilityQueryError = ErrorType<Message>;

export function useKeyopollsProfileApiAuthCheckUsernameAvailability<
  TData = Awaited<ReturnType<typeof keyopollsProfileApiAuthCheckUsernameAvailability>>,
  TError = ErrorType<Message>,
>(
  username: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsProfileApiAuthCheckUsernameAvailability>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsProfileApiAuthCheckUsernameAvailability>>,
          TError,
          Awaited<ReturnType<typeof keyopollsProfileApiAuthCheckUsernameAvailability>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsProfileApiAuthCheckUsernameAvailability<
  TData = Awaited<ReturnType<typeof keyopollsProfileApiAuthCheckUsernameAvailability>>,
  TError = ErrorType<Message>,
>(
  username: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsProfileApiAuthCheckUsernameAvailability>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof keyopollsProfileApiAuthCheckUsernameAvailability>>,
          TError,
          Awaited<ReturnType<typeof keyopollsProfileApiAuthCheckUsernameAvailability>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useKeyopollsProfileApiAuthCheckUsernameAvailability<
  TData = Awaited<ReturnType<typeof keyopollsProfileApiAuthCheckUsernameAvailability>>,
  TError = ErrorType<Message>,
>(
  username: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsProfileApiAuthCheckUsernameAvailability>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Check Username Availability
 */

export function useKeyopollsProfileApiAuthCheckUsernameAvailability<
  TData = Awaited<ReturnType<typeof keyopollsProfileApiAuthCheckUsernameAvailability>>,
  TError = ErrorType<Message>,
>(
  username: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof keyopollsProfileApiAuthCheckUsernameAvailability>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getKeyopollsProfileApiAuthCheckUsernameAvailabilityQueryOptions(
    username,
    options
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
